
EmptySketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  0000157a  0000160e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000157a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b8  00800182  00800182  00001690  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007861  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014c7  00000000  00000000  00009241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001920  00000000  00000000  0000a708  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000840  00000000  00000000  0000c028  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ad4  00000000  00000000  0000c868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003031  00000000  00000000  0000e33c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  0001136d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
       4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
       8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
       c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      40:	0c 94 9f 08 	jmp	0x113e	; 0x113e <__vector_16>
      44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      48:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_18>
      4c:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__vector_19>
      50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
      68:	08 00       	.word	0x0008	; ????
      6a:	00 00       	nop
      6c:	be 92       	st	-X, r11
      6e:	24 49       	sbci	r18, 0x94	; 148
      70:	12 3e       	cpi	r17, 0xE2	; 226
      72:	ab aa       	std	Y+51, r10	; 0x33
      74:	aa 2a       	or	r10, r26
      76:	be cd       	rjmp	.-1156   	; 0xfffffbf4 <__eeprom_end+0xff7efbf4>
      78:	cc cc       	rjmp	.-1640   	; 0xfffffa12 <__eeprom_end+0xff7efa12>
      7a:	4c 3e       	cpi	r20, 0xEC	; 236
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	be ab       	std	Y+54, r27	; 0x36
      82:	aa aa       	std	Y+50, r10	; 0x32
      84:	aa 3e       	cpi	r26, 0xEA	; 234
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	00 00       	nop
      92:	00 00       	nop
      94:	00 08       	sbc	r0, r0
      96:	41 78       	andi	r20, 0x81	; 129
      98:	d3 bb       	out	0x13, r29	; 19
      9a:	43 87       	std	Z+11, r20	; 0x0b
      9c:	d1 13       	cpse	r29, r17
      9e:	3d 19       	sub	r19, r13
      a0:	0e 3c       	cpi	r16, 0xCE	; 206
      a2:	c3 bd       	out	0x23, r28	; 35
      a4:	42 82       	std	Z+2, r4	; 0x02
      a6:	ad 2b       	or	r26, r29
      a8:	3e 68       	ori	r19, 0x8E	; 142
      aa:	ec 82       	std	Y+4, r14	; 0x04
      ac:	76 be       	out	0x36, r7	; 54
      ae:	d9 8f       	std	Y+25, r29	; 0x19
      b0:	e1 a9       	ldd	r30, Z+49	; 0x31
      b2:	3e 4c       	sbci	r19, 0xCE	; 206
      b4:	80 ef       	ldi	r24, 0xF0	; 240
      b6:	ff be       	out	0x3f, r15	; 63
      b8:	01 c4       	rjmp	.+2050   	; 0x8bc <__mulsf3x+0x2>
      ba:	ff 7f       	andi	r31, 0xFF	; 255
      bc:	3f 00       	.word	0x003f	; ????
      be:	00 00       	nop
	...

000000c2 <__trampolines_end>:
      c2:	00 00       	nop
      c4:	00 08       	sbc	r0, r0
      c6:	00 02       	muls	r16, r16
      c8:	01 00       	.word	0x0001	; ????
      ca:	00 03       	mulsu	r16, r16
      cc:	04 07       	cpc	r16, r20
	...

000000d6 <digital_pin_to_bit_mask_PGM>:
      d6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      e6:	04 08 10 20                                         ... 

000000ea <digital_pin_to_port_PGM>:
      ea:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      fa:	03 03 03 03                                         ....

000000fe <port_to_output_PGM>:
      fe:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000108 <port_to_mode_PGM>:
     108:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000112 <__ctors_start>:
     112:	79 06       	cpc	r7, r25

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d8 e0       	ldi	r29, 0x08	; 8
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	ea e7       	ldi	r30, 0x7A	; 122
     128:	f5 e1       	ldi	r31, 0x15	; 21
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	a2 38       	cpi	r26, 0x82	; 130
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	22 e0       	ldi	r18, 0x02	; 2
     138:	a2 e8       	ldi	r26, 0x82	; 130
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	aa 33       	cpi	r26, 0x3A	; 58
     142:	b2 07       	cpc	r27, r18
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>

00000146 <__do_global_ctors>:
     146:	10 e0       	ldi	r17, 0x00	; 0
     148:	ca e8       	ldi	r28, 0x8A	; 138
     14a:	d0 e0       	ldi	r29, 0x00	; 0
     14c:	04 c0       	rjmp	.+8      	; 0x156 <__do_global_ctors+0x10>
     14e:	21 97       	sbiw	r28, 0x01	; 1
     150:	fe 01       	movw	r30, r28
     152:	0e 94 b5 0a 	call	0x156a	; 0x156a <__tablejump2__>
     156:	c9 38       	cpi	r28, 0x89	; 137
     158:	d1 07       	cpc	r29, r17
     15a:	c9 f7       	brne	.-14     	; 0x14e <__do_global_ctors+0x8>
     15c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <main>
     160:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <_exit>

00000164 <__bad_interrupt>:
     164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <_Z13ConvertToTempv>:
ï»¿#include "ReadTemperature.h"

double ConvertToTemp() {
     168:	cf 92       	push	r12
     16a:	df 92       	push	r13
     16c:	ef 92       	push	r14
     16e:	ff 92       	push	r15
	
	int adc = analogRead(0);
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	0e 94 85 09 	call	0x130a	; 0x130a <analogRead>

	Temp = log(10000.0*((1024.0/adc-1)));
     176:	bc 01       	movw	r22, r24
     178:	99 0f       	add	r25, r25
     17a:	88 0b       	sbc	r24, r24
     17c:	99 0b       	sbc	r25, r25
     17e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__floatsisf>
     182:	9b 01       	movw	r18, r22
     184:	ac 01       	movw	r20, r24
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	80 e8       	ldi	r24, 0x80	; 128
     18c:	94 e4       	ldi	r25, 0x44	; 68
     18e:	0e 94 c4 02 	call	0x588	; 0x588 <__divsf3>
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 e8       	ldi	r20, 0x80	; 128
     198:	5f e3       	ldi	r21, 0x3F	; 63
     19a:	0e 94 57 02 	call	0x4ae	; 0x4ae <__subsf3>
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e4       	ldi	r19, 0x40	; 64
     1a2:	4c e1       	ldi	r20, 0x1C	; 28
     1a4:	56 e4       	ldi	r21, 0x46	; 70
     1a6:	0e 94 4a 04 	call	0x894	; 0x894 <__mulsf3>
     1aa:	0e 94 02 04 	call	0x804	; 0x804 <log>
     1ae:	6b 01       	movw	r12, r22
     1b0:	7c 01       	movw	r14, r24
	Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp ))* Temp );
     1b2:	29 e5       	ldi	r18, 0x59	; 89
     1b4:	37 e4       	ldi	r19, 0x47	; 71
     1b6:	4c eb       	ldi	r20, 0xBC	; 188
     1b8:	53 e3       	ldi	r21, 0x33	; 51
     1ba:	0e 94 4a 04 	call	0x894	; 0x894 <__mulsf3>
     1be:	a7 01       	movw	r20, r14
     1c0:	96 01       	movw	r18, r12
     1c2:	0e 94 4a 04 	call	0x894	; 0x894 <__mulsf3>
     1c6:	23 e7       	ldi	r18, 0x73	; 115
     1c8:	3f e7       	ldi	r19, 0x7F	; 127
     1ca:	45 e7       	ldi	r20, 0x75	; 117
     1cc:	59 e3       	ldi	r21, 0x39	; 57
     1ce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__addsf3>
     1d2:	a7 01       	movw	r20, r14
     1d4:	96 01       	movw	r18, r12
     1d6:	0e 94 4a 04 	call	0x894	; 0x894 <__mulsf3>
     1da:	2b ee       	ldi	r18, 0xEB	; 235
     1dc:	3f ef       	ldi	r19, 0xFF	; 255
     1de:	43 e9       	ldi	r20, 0x93	; 147
     1e0:	5a e3       	ldi	r21, 0x3A	; 58
     1e2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__addsf3>
     1e6:	9b 01       	movw	r18, r22
     1e8:	ac 01       	movw	r20, r24
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	80 e8       	ldi	r24, 0x80	; 128
     1f0:	9f e3       	ldi	r25, 0x3F	; 63
     1f2:	0e 94 c4 02 	call	0x588	; 0x588 <__divsf3>
     1f6:	60 93 90 01 	sts	0x0190, r22	; 0x800190 <Temp>
     1fa:	70 93 91 01 	sts	0x0191, r23	; 0x800191 <Temp+0x1>
     1fe:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <Temp+0x2>
     202:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <Temp+0x3>
	TempC = Temp - 273.15;
     206:	23 e3       	ldi	r18, 0x33	; 51
     208:	33 e9       	ldi	r19, 0x93	; 147
     20a:	48 e8       	ldi	r20, 0x88	; 136
     20c:	53 e4       	ldi	r21, 0x43	; 67
     20e:	0e 94 57 02 	call	0x4ae	; 0x4ae <__subsf3>
     212:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <TempC>
     216:	70 93 8d 01 	sts	0x018D, r23	; 0x80018d <TempC+0x1>
     21a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <TempC+0x2>
     21e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <TempC+0x3>
	Serial.print("Temperature C = ");
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	71 e0       	ldi	r23, 0x01	; 1
     226:	84 e9       	ldi	r24, 0x94	; 148
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Print5printEPKc>
	Serial.print(TempC);
     22e:	40 91 8c 01 	lds	r20, 0x018C	; 0x80018c <TempC>
     232:	50 91 8d 01 	lds	r21, 0x018D	; 0x80018d <TempC+0x1>
     236:	60 91 8e 01 	lds	r22, 0x018E	; 0x80018e <TempC+0x2>
     23a:	70 91 8f 01 	lds	r23, 0x018F	; 0x80018f <TempC+0x3>
     23e:	22 e0       	ldi	r18, 0x02	; 2
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	84 e9       	ldi	r24, 0x94	; 148
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	0e 94 9d 08 	call	0x113a	; 0x113a <_ZN5Print5printEdi>
	Serial.print(" C. ");
     24a:	62 e1       	ldi	r22, 0x12	; 18
     24c:	71 e0       	ldi	r23, 0x01	; 1
     24e:	84 e9       	ldi	r24, 0x94	; 148
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Print5printEPKc>
	
	TempF = (TempC * 9.0)/ 5.0 + 32.0;
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	40 e1       	ldi	r20, 0x10	; 16
     25c:	51 e4       	ldi	r21, 0x41	; 65
     25e:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <TempC>
     262:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <TempC+0x1>
     266:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <TempC+0x2>
     26a:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <TempC+0x3>
     26e:	0e 94 4a 04 	call	0x894	; 0x894 <__mulsf3>
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	40 ea       	ldi	r20, 0xA0	; 160
     278:	50 e4       	ldi	r21, 0x40	; 64
     27a:	0e 94 c4 02 	call	0x588	; 0x588 <__divsf3>
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e0       	ldi	r20, 0x00	; 0
     284:	52 e4       	ldi	r21, 0x42	; 66
     286:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__addsf3>
     28a:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <TempF>
     28e:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <TempF+0x1>
     292:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <TempF+0x2>
     296:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <TempF+0x3>
	Serial.print("Temperature F = ");
     29a:	67 e1       	ldi	r22, 0x17	; 23
     29c:	71 e0       	ldi	r23, 0x01	; 1
     29e:	84 e9       	ldi	r24, 0x94	; 148
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Print5printEPKc>
	Serial.print(TempF);
     2a6:	40 91 88 01 	lds	r20, 0x0188	; 0x800188 <TempF>
     2aa:	50 91 89 01 	lds	r21, 0x0189	; 0x800189 <TempF+0x1>
     2ae:	60 91 8a 01 	lds	r22, 0x018A	; 0x80018a <TempF+0x2>
     2b2:	70 91 8b 01 	lds	r23, 0x018B	; 0x80018b <TempF+0x3>
     2b6:	22 e0       	ldi	r18, 0x02	; 2
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	84 e9       	ldi	r24, 0x94	; 148
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	0e 94 9d 08 	call	0x113a	; 0x113a <_ZN5Print5printEdi>
	Serial.println(" F.");
     2c2:	68 e2       	ldi	r22, 0x28	; 40
     2c4:	71 e0       	ldi	r23, 0x01	; 1
     2c6:	84 e9       	ldi	r24, 0x94	; 148
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	0e 94 03 07 	call	0xe06	; 0xe06 <_ZN5Print7printlnEPKc>
	
	delay(1000);
     2ce:	68 ee       	ldi	r22, 0xE8	; 232
     2d0:	73 e0       	ldi	r23, 0x03	; 3
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 0e 09 	call	0x121c	; 0x121c <delay>
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	df 90       	pop	r13
     2e0:	cf 90       	pop	r12
     2e2:	08 95       	ret

000002e4 <_Z9Segments1i>:
	Segments2(second_number);
	
	delay(1000);
}

void Segments1(int number){
     2e4:	ef 92       	push	r14
     2e6:	ff 92       	push	r15
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	04 e5       	ldi	r16, 0x54	; 84
     2f2:	11 e0       	ldi	r17, 0x01	; 1
	for (int x=0;x<7;x++){
     2f4:	c0 e0       	ldi	r28, 0x00	; 0
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
		value = bitRead(numbers[number], x);
     2f8:	84 5c       	subi	r24, 0xC4	; 196
     2fa:	9e 4f       	sbci	r25, 0xFE	; 254
     2fc:	fc 01       	movw	r30, r24
     2fe:	e0 80       	ld	r14, Z
     300:	f1 2c       	mov	r15, r1
     302:	b7 01       	movw	r22, r14
     304:	0c 2e       	mov	r0, r28
     306:	02 c0       	rjmp	.+4      	; 0x30c <_Z9Segments1i+0x28>
     308:	75 95       	asr	r23
     30a:	67 95       	ror	r22
     30c:	0a 94       	dec	r0
     30e:	e2 f7       	brpl	.-8      	; 0x308 <_Z9Segments1i+0x24>
     310:	61 70       	andi	r22, 0x01	; 1
     312:	77 27       	eor	r23, r23
     314:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <__data_end+0x1>
     318:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <__data_end>
		digitalWrite(pin1[x], value);
     31c:	f8 01       	movw	r30, r16
     31e:	80 81       	ld	r24, Z
     320:	0e 5f       	subi	r16, 0xFE	; 254
     322:	1f 4f       	sbci	r17, 0xFF	; 255
     324:	0e 94 07 0a 	call	0x140e	; 0x140e <digitalWrite>
	
	delay(1000);
}

void Segments1(int number){
	for (int x=0;x<7;x++){
     328:	21 96       	adiw	r28, 0x01	; 1
     32a:	c7 30       	cpi	r28, 0x07	; 7
     32c:	d1 05       	cpc	r29, r1
     32e:	49 f7       	brne	.-46     	; 0x302 <_Z9Segments1i+0x1e>
		value = bitRead(numbers[number], x);
		digitalWrite(pin1[x], value);
	}
}
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	ff 90       	pop	r15
     33a:	ef 90       	pop	r14
     33c:	08 95       	ret

0000033e <_Z9Segments2i>:
void Segments2(int number){
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	06 e4       	ldi	r16, 0x46	; 70
     34c:	11 e0       	ldi	r17, 0x01	; 1
	for (int x=0;x<7;x++){
     34e:	c0 e0       	ldi	r28, 0x00	; 0
     350:	d0 e0       	ldi	r29, 0x00	; 0
		value = bitRead(numbers[number], x);
     352:	84 5c       	subi	r24, 0xC4	; 196
     354:	9e 4f       	sbci	r25, 0xFE	; 254
     356:	fc 01       	movw	r30, r24
     358:	e0 80       	ld	r14, Z
     35a:	f1 2c       	mov	r15, r1
     35c:	b7 01       	movw	r22, r14
     35e:	0c 2e       	mov	r0, r28
     360:	02 c0       	rjmp	.+4      	; 0x366 <_Z9Segments2i+0x28>
     362:	75 95       	asr	r23
     364:	67 95       	ror	r22
     366:	0a 94       	dec	r0
     368:	e2 f7       	brpl	.-8      	; 0x362 <_Z9Segments2i+0x24>
     36a:	61 70       	andi	r22, 0x01	; 1
     36c:	77 27       	eor	r23, r23
     36e:	70 93 83 01 	sts	0x0183, r23	; 0x800183 <__data_end+0x1>
     372:	60 93 82 01 	sts	0x0182, r22	; 0x800182 <__data_end>
		digitalWrite(pin2[x], value);
     376:	f8 01       	movw	r30, r16
     378:	80 81       	ld	r24, Z
     37a:	0e 5f       	subi	r16, 0xFE	; 254
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	0e 94 07 0a 	call	0x140e	; 0x140e <digitalWrite>
		value = bitRead(numbers[number], x);
		digitalWrite(pin1[x], value);
	}
}
void Segments2(int number){
	for (int x=0;x<7;x++){
     382:	21 96       	adiw	r28, 0x01	; 1
     384:	c7 30       	cpi	r28, 0x07	; 7
     386:	d1 05       	cpc	r29, r1
     388:	49 f7       	brne	.-46     	; 0x35c <_Z9Segments2i+0x1e>
		value = bitRead(numbers[number], x);
		digitalWrite(pin2[x], value);
	}
}
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <_Z10callNumberv>:
ï»¿
#include "WriteDisplay.h"

void callNumber(){
	//tempC
	int a = TempC;
     398:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <TempC>
     39c:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <TempC+0x1>
     3a0:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <TempC+0x2>
     3a4:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <TempC+0x3>
     3a8:	0e 94 36 03 	call	0x66c	; 0x66c <__fixsfsi>
	first_number = a/10;
     3ac:	cb 01       	movw	r24, r22
     3ae:	6a e0       	ldi	r22, 0x0A	; 10
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__divmodhi4>
     3b6:	70 93 87 01 	sts	0x0187, r23	; 0x800187 <first_number+0x1>
     3ba:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <first_number>
	second_number = a%10;
     3be:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <second_number+0x1>
     3c2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <second_number>
		
	Segments1(first_number);
     3c6:	cb 01       	movw	r24, r22
     3c8:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_Z9Segments1i>
	Segments2(second_number);
     3cc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <second_number>
     3d0:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <second_number+0x1>
     3d4:	0e 94 9f 01 	call	0x33e	; 0x33e <_Z9Segments2i>
	
	delay(1000);
     3d8:	68 ee       	ldi	r22, 0xE8	; 232
     3da:	73 e0       	ldi	r23, 0x03	; 3
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0c 94 0e 09 	jmp	0x121c	; 0x121c <delay>

000003e4 <setup>:
//Beginning of Auto generated function prototypes by Atmel Studio
//End of Auto generated function prototypes by Atmel Studio

void setup() {
  // put your setup code here, to run once:
	pinMode(LED_A1, OUTPUT);
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_B1, OUTPUT);
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_C1, OUTPUT);
     3f4:	61 e0       	ldi	r22, 0x01	; 1
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_D1, OUTPUT);
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	83 e0       	ldi	r24, 0x03	; 3
     400:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_E1, OUTPUT);
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	84 e0       	ldi	r24, 0x04	; 4
     408:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_F1, OUTPUT);
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	85 e0       	ldi	r24, 0x05	; 5
     410:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_G1, OUTPUT);
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	86 e0       	ldi	r24, 0x06	; 6
     418:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_A2, OUTPUT);
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	87 e0       	ldi	r24, 0x07	; 7
     420:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_B2, OUTPUT);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	88 e0       	ldi	r24, 0x08	; 8
     428:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_C2, OUTPUT);
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	89 e0       	ldi	r24, 0x09	; 9
     430:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_D2, OUTPUT);
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	8a e0       	ldi	r24, 0x0A	; 10
     438:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_E2, OUTPUT);
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	8b e0       	ldi	r24, 0x0B	; 11
     440:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_F2, OUTPUT);
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	8c e0       	ldi	r24, 0x0C	; 12
     448:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
	pinMode(LED_G2, OUTPUT);
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	8d e0       	ldi	r24, 0x0D	; 13
     450:	0e 94 cb 09 	call	0x1396	; 0x1396 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     454:	26 e0       	ldi	r18, 0x06	; 6
     456:	40 e8       	ldi	r20, 0x80	; 128
     458:	55 e2       	ldi	r21, 0x25	; 37
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	84 e9       	ldi	r24, 0x94	; 148
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <_ZN14HardwareSerial5beginEmh>

00000466 <loop>:
	Serial.begin(9600);
}

void loop() {
  // put your main code here, to run repeatedly:
	ConvertToTemp();
     466:	0e 94 b4 00 	call	0x168	; 0x168 <_Z13ConvertToTempv>
  // get temp
	callNumber();
     46a:	0e 94 cc 01 	call	0x398	; 0x398 <_Z10callNumberv>
	Serial.print("First ");
     46e:	6c e2       	ldi	r22, 0x2C	; 44
     470:	71 e0       	ldi	r23, 0x01	; 1
     472:	84 e9       	ldi	r24, 0x94	; 148
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Print5printEPKc>
	Serial.print(first_number);
     47a:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <first_number>
     47e:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <first_number+0x1>
     482:	4a e0       	ldi	r20, 0x0A	; 10
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	84 e9       	ldi	r24, 0x94	; 148
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 b3 07 	call	0xf66	; 0xf66 <_ZN5Print5printEii>
	Serial.print(" Second ");
     48e:	63 e3       	ldi	r22, 0x33	; 51
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	84 e9       	ldi	r24, 0x94	; 148
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN5Print5printEPKc>
	Serial.print(second_number);
     49a:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <second_number>
     49e:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <second_number+0x1>
     4a2:	4a e0       	ldi	r20, 0x0A	; 10
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	84 e9       	ldi	r24, 0x94	; 148
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <_ZN5Print5printEii>

000004ae <__subsf3>:
     4ae:	50 58       	subi	r21, 0x80	; 128

000004b0 <__addsf3>:
     4b0:	bb 27       	eor	r27, r27
     4b2:	aa 27       	eor	r26, r26
     4b4:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3x>
     4b8:	0c 94 c0 03 	jmp	0x780	; 0x780 <__fp_round>
     4bc:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_pscA>
     4c0:	38 f0       	brcs	.+14     	; 0x4d0 <__addsf3+0x20>
     4c2:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscB>
     4c6:	20 f0       	brcs	.+8      	; 0x4d0 <__addsf3+0x20>
     4c8:	39 f4       	brne	.+14     	; 0x4d8 <__addsf3+0x28>
     4ca:	9f 3f       	cpi	r25, 0xFF	; 255
     4cc:	19 f4       	brne	.+6      	; 0x4d4 <__addsf3+0x24>
     4ce:	26 f4       	brtc	.+8      	; 0x4d8 <__addsf3+0x28>
     4d0:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_nan>
     4d4:	0e f4       	brtc	.+2      	; 0x4d8 <__addsf3+0x28>
     4d6:	e0 95       	com	r30
     4d8:	e7 fb       	bst	r30, 7
     4da:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>

000004de <__addsf3x>:
     4de:	e9 2f       	mov	r30, r25
     4e0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_split3>
     4e4:	58 f3       	brcs	.-42     	; 0x4bc <__addsf3+0xc>
     4e6:	ba 17       	cp	r27, r26
     4e8:	62 07       	cpc	r22, r18
     4ea:	73 07       	cpc	r23, r19
     4ec:	84 07       	cpc	r24, r20
     4ee:	95 07       	cpc	r25, r21
     4f0:	20 f0       	brcs	.+8      	; 0x4fa <__addsf3x+0x1c>
     4f2:	79 f4       	brne	.+30     	; 0x512 <__addsf3x+0x34>
     4f4:	a6 f5       	brtc	.+104    	; 0x55e <__addsf3x+0x80>
     4f6:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_zero>
     4fa:	0e f4       	brtc	.+2      	; 0x4fe <__addsf3x+0x20>
     4fc:	e0 95       	com	r30
     4fe:	0b 2e       	mov	r0, r27
     500:	ba 2f       	mov	r27, r26
     502:	a0 2d       	mov	r26, r0
     504:	0b 01       	movw	r0, r22
     506:	b9 01       	movw	r22, r18
     508:	90 01       	movw	r18, r0
     50a:	0c 01       	movw	r0, r24
     50c:	ca 01       	movw	r24, r20
     50e:	a0 01       	movw	r20, r0
     510:	11 24       	eor	r1, r1
     512:	ff 27       	eor	r31, r31
     514:	59 1b       	sub	r21, r25
     516:	99 f0       	breq	.+38     	; 0x53e <__addsf3x+0x60>
     518:	59 3f       	cpi	r21, 0xF9	; 249
     51a:	50 f4       	brcc	.+20     	; 0x530 <__addsf3x+0x52>
     51c:	50 3e       	cpi	r21, 0xE0	; 224
     51e:	68 f1       	brcs	.+90     	; 0x57a <__addsf3x+0x9c>
     520:	1a 16       	cp	r1, r26
     522:	f0 40       	sbci	r31, 0x00	; 0
     524:	a2 2f       	mov	r26, r18
     526:	23 2f       	mov	r18, r19
     528:	34 2f       	mov	r19, r20
     52a:	44 27       	eor	r20, r20
     52c:	58 5f       	subi	r21, 0xF8	; 248
     52e:	f3 cf       	rjmp	.-26     	; 0x516 <__addsf3x+0x38>
     530:	46 95       	lsr	r20
     532:	37 95       	ror	r19
     534:	27 95       	ror	r18
     536:	a7 95       	ror	r26
     538:	f0 40       	sbci	r31, 0x00	; 0
     53a:	53 95       	inc	r21
     53c:	c9 f7       	brne	.-14     	; 0x530 <__addsf3x+0x52>
     53e:	7e f4       	brtc	.+30     	; 0x55e <__addsf3x+0x80>
     540:	1f 16       	cp	r1, r31
     542:	ba 0b       	sbc	r27, r26
     544:	62 0b       	sbc	r22, r18
     546:	73 0b       	sbc	r23, r19
     548:	84 0b       	sbc	r24, r20
     54a:	ba f0       	brmi	.+46     	; 0x57a <__addsf3x+0x9c>
     54c:	91 50       	subi	r25, 0x01	; 1
     54e:	a1 f0       	breq	.+40     	; 0x578 <__addsf3x+0x9a>
     550:	ff 0f       	add	r31, r31
     552:	bb 1f       	adc	r27, r27
     554:	66 1f       	adc	r22, r22
     556:	77 1f       	adc	r23, r23
     558:	88 1f       	adc	r24, r24
     55a:	c2 f7       	brpl	.-16     	; 0x54c <__addsf3x+0x6e>
     55c:	0e c0       	rjmp	.+28     	; 0x57a <__addsf3x+0x9c>
     55e:	ba 0f       	add	r27, r26
     560:	62 1f       	adc	r22, r18
     562:	73 1f       	adc	r23, r19
     564:	84 1f       	adc	r24, r20
     566:	48 f4       	brcc	.+18     	; 0x57a <__addsf3x+0x9c>
     568:	87 95       	ror	r24
     56a:	77 95       	ror	r23
     56c:	67 95       	ror	r22
     56e:	b7 95       	ror	r27
     570:	f7 95       	ror	r31
     572:	9e 3f       	cpi	r25, 0xFE	; 254
     574:	08 f0       	brcs	.+2      	; 0x578 <__addsf3x+0x9a>
     576:	b0 cf       	rjmp	.-160    	; 0x4d8 <__addsf3+0x28>
     578:	93 95       	inc	r25
     57a:	88 0f       	add	r24, r24
     57c:	08 f0       	brcs	.+2      	; 0x580 <__addsf3x+0xa2>
     57e:	99 27       	eor	r25, r25
     580:	ee 0f       	add	r30, r30
     582:	97 95       	ror	r25
     584:	87 95       	ror	r24
     586:	08 95       	ret

00000588 <__divsf3>:
     588:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__divsf3x>
     58c:	0c 94 c0 03 	jmp	0x780	; 0x780 <__fp_round>
     590:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscB>
     594:	58 f0       	brcs	.+22     	; 0x5ac <__divsf3+0x24>
     596:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_pscA>
     59a:	40 f0       	brcs	.+16     	; 0x5ac <__divsf3+0x24>
     59c:	29 f4       	brne	.+10     	; 0x5a8 <__divsf3+0x20>
     59e:	5f 3f       	cpi	r21, 0xFF	; 255
     5a0:	29 f0       	breq	.+10     	; 0x5ac <__divsf3+0x24>
     5a2:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
     5a6:	51 11       	cpse	r21, r1
     5a8:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_szero>
     5ac:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_nan>

000005b0 <__divsf3x>:
     5b0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_split3>
     5b4:	68 f3       	brcs	.-38     	; 0x590 <__divsf3+0x8>

000005b6 <__divsf3_pse>:
     5b6:	99 23       	and	r25, r25
     5b8:	b1 f3       	breq	.-20     	; 0x5a6 <__divsf3+0x1e>
     5ba:	55 23       	and	r21, r21
     5bc:	91 f3       	breq	.-28     	; 0x5a2 <__divsf3+0x1a>
     5be:	95 1b       	sub	r25, r21
     5c0:	55 0b       	sbc	r21, r21
     5c2:	bb 27       	eor	r27, r27
     5c4:	aa 27       	eor	r26, r26
     5c6:	62 17       	cp	r22, r18
     5c8:	73 07       	cpc	r23, r19
     5ca:	84 07       	cpc	r24, r20
     5cc:	38 f0       	brcs	.+14     	; 0x5dc <__divsf3_pse+0x26>
     5ce:	9f 5f       	subi	r25, 0xFF	; 255
     5d0:	5f 4f       	sbci	r21, 0xFF	; 255
     5d2:	22 0f       	add	r18, r18
     5d4:	33 1f       	adc	r19, r19
     5d6:	44 1f       	adc	r20, r20
     5d8:	aa 1f       	adc	r26, r26
     5da:	a9 f3       	breq	.-22     	; 0x5c6 <__divsf3_pse+0x10>
     5dc:	35 d0       	rcall	.+106    	; 0x648 <__divsf3_pse+0x92>
     5de:	0e 2e       	mov	r0, r30
     5e0:	3a f0       	brmi	.+14     	; 0x5f0 <__divsf3_pse+0x3a>
     5e2:	e0 e8       	ldi	r30, 0x80	; 128
     5e4:	32 d0       	rcall	.+100    	; 0x64a <__divsf3_pse+0x94>
     5e6:	91 50       	subi	r25, 0x01	; 1
     5e8:	50 40       	sbci	r21, 0x00	; 0
     5ea:	e6 95       	lsr	r30
     5ec:	00 1c       	adc	r0, r0
     5ee:	ca f7       	brpl	.-14     	; 0x5e2 <__divsf3_pse+0x2c>
     5f0:	2b d0       	rcall	.+86     	; 0x648 <__divsf3_pse+0x92>
     5f2:	fe 2f       	mov	r31, r30
     5f4:	29 d0       	rcall	.+82     	; 0x648 <__divsf3_pse+0x92>
     5f6:	66 0f       	add	r22, r22
     5f8:	77 1f       	adc	r23, r23
     5fa:	88 1f       	adc	r24, r24
     5fc:	bb 1f       	adc	r27, r27
     5fe:	26 17       	cp	r18, r22
     600:	37 07       	cpc	r19, r23
     602:	48 07       	cpc	r20, r24
     604:	ab 07       	cpc	r26, r27
     606:	b0 e8       	ldi	r27, 0x80	; 128
     608:	09 f0       	breq	.+2      	; 0x60c <__divsf3_pse+0x56>
     60a:	bb 0b       	sbc	r27, r27
     60c:	80 2d       	mov	r24, r0
     60e:	bf 01       	movw	r22, r30
     610:	ff 27       	eor	r31, r31
     612:	93 58       	subi	r25, 0x83	; 131
     614:	5f 4f       	sbci	r21, 0xFF	; 255
     616:	3a f0       	brmi	.+14     	; 0x626 <__divsf3_pse+0x70>
     618:	9e 3f       	cpi	r25, 0xFE	; 254
     61a:	51 05       	cpc	r21, r1
     61c:	78 f0       	brcs	.+30     	; 0x63c <__divsf3_pse+0x86>
     61e:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
     622:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_szero>
     626:	5f 3f       	cpi	r21, 0xFF	; 255
     628:	e4 f3       	brlt	.-8      	; 0x622 <__divsf3_pse+0x6c>
     62a:	98 3e       	cpi	r25, 0xE8	; 232
     62c:	d4 f3       	brlt	.-12     	; 0x622 <__divsf3_pse+0x6c>
     62e:	86 95       	lsr	r24
     630:	77 95       	ror	r23
     632:	67 95       	ror	r22
     634:	b7 95       	ror	r27
     636:	f7 95       	ror	r31
     638:	9f 5f       	subi	r25, 0xFF	; 255
     63a:	c9 f7       	brne	.-14     	; 0x62e <__divsf3_pse+0x78>
     63c:	88 0f       	add	r24, r24
     63e:	91 1d       	adc	r25, r1
     640:	96 95       	lsr	r25
     642:	87 95       	ror	r24
     644:	97 f9       	bld	r25, 7
     646:	08 95       	ret
     648:	e1 e0       	ldi	r30, 0x01	; 1
     64a:	66 0f       	add	r22, r22
     64c:	77 1f       	adc	r23, r23
     64e:	88 1f       	adc	r24, r24
     650:	bb 1f       	adc	r27, r27
     652:	62 17       	cp	r22, r18
     654:	73 07       	cpc	r23, r19
     656:	84 07       	cpc	r24, r20
     658:	ba 07       	cpc	r27, r26
     65a:	20 f0       	brcs	.+8      	; 0x664 <__divsf3_pse+0xae>
     65c:	62 1b       	sub	r22, r18
     65e:	73 0b       	sbc	r23, r19
     660:	84 0b       	sbc	r24, r20
     662:	ba 0b       	sbc	r27, r26
     664:	ee 1f       	adc	r30, r30
     666:	88 f7       	brcc	.-30     	; 0x64a <__divsf3_pse+0x94>
     668:	e0 95       	com	r30
     66a:	08 95       	ret

0000066c <__fixsfsi>:
     66c:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixunssfsi>
     670:	68 94       	set
     672:	b1 11       	cpse	r27, r1
     674:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_szero>
     678:	08 95       	ret

0000067a <__fixunssfsi>:
     67a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fp_splitA>
     67e:	88 f0       	brcs	.+34     	; 0x6a2 <__fixunssfsi+0x28>
     680:	9f 57       	subi	r25, 0x7F	; 127
     682:	98 f0       	brcs	.+38     	; 0x6aa <__fixunssfsi+0x30>
     684:	b9 2f       	mov	r27, r25
     686:	99 27       	eor	r25, r25
     688:	b7 51       	subi	r27, 0x17	; 23
     68a:	b0 f0       	brcs	.+44     	; 0x6b8 <__fixunssfsi+0x3e>
     68c:	e1 f0       	breq	.+56     	; 0x6c6 <__fixunssfsi+0x4c>
     68e:	66 0f       	add	r22, r22
     690:	77 1f       	adc	r23, r23
     692:	88 1f       	adc	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	1a f0       	brmi	.+6      	; 0x69e <__fixunssfsi+0x24>
     698:	ba 95       	dec	r27
     69a:	c9 f7       	brne	.-14     	; 0x68e <__fixunssfsi+0x14>
     69c:	14 c0       	rjmp	.+40     	; 0x6c6 <__fixunssfsi+0x4c>
     69e:	b1 30       	cpi	r27, 0x01	; 1
     6a0:	91 f0       	breq	.+36     	; 0x6c6 <__fixunssfsi+0x4c>
     6a2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_zero>
     6a6:	b1 e0       	ldi	r27, 0x01	; 1
     6a8:	08 95       	ret
     6aa:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__fp_zero>
     6ae:	67 2f       	mov	r22, r23
     6b0:	78 2f       	mov	r23, r24
     6b2:	88 27       	eor	r24, r24
     6b4:	b8 5f       	subi	r27, 0xF8	; 248
     6b6:	39 f0       	breq	.+14     	; 0x6c6 <__fixunssfsi+0x4c>
     6b8:	b9 3f       	cpi	r27, 0xF9	; 249
     6ba:	cc f3       	brlt	.-14     	; 0x6ae <__fixunssfsi+0x34>
     6bc:	86 95       	lsr	r24
     6be:	77 95       	ror	r23
     6c0:	67 95       	ror	r22
     6c2:	b3 95       	inc	r27
     6c4:	d9 f7       	brne	.-10     	; 0x6bc <__fixunssfsi+0x42>
     6c6:	3e f4       	brtc	.+14     	; 0x6d6 <__fixunssfsi+0x5c>
     6c8:	90 95       	com	r25
     6ca:	80 95       	com	r24
     6cc:	70 95       	com	r23
     6ce:	61 95       	neg	r22
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	8f 4f       	sbci	r24, 0xFF	; 255
     6d4:	9f 4f       	sbci	r25, 0xFF	; 255
     6d6:	08 95       	ret

000006d8 <__floatunsisf>:
     6d8:	e8 94       	clt
     6da:	09 c0       	rjmp	.+18     	; 0x6ee <__floatsisf+0x12>

000006dc <__floatsisf>:
     6dc:	97 fb       	bst	r25, 7
     6de:	3e f4       	brtc	.+14     	; 0x6ee <__floatsisf+0x12>
     6e0:	90 95       	com	r25
     6e2:	80 95       	com	r24
     6e4:	70 95       	com	r23
     6e6:	61 95       	neg	r22
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	8f 4f       	sbci	r24, 0xFF	; 255
     6ec:	9f 4f       	sbci	r25, 0xFF	; 255
     6ee:	99 23       	and	r25, r25
     6f0:	a9 f0       	breq	.+42     	; 0x71c <__floatsisf+0x40>
     6f2:	f9 2f       	mov	r31, r25
     6f4:	96 e9       	ldi	r25, 0x96	; 150
     6f6:	bb 27       	eor	r27, r27
     6f8:	93 95       	inc	r25
     6fa:	f6 95       	lsr	r31
     6fc:	87 95       	ror	r24
     6fe:	77 95       	ror	r23
     700:	67 95       	ror	r22
     702:	b7 95       	ror	r27
     704:	f1 11       	cpse	r31, r1
     706:	f8 cf       	rjmp	.-16     	; 0x6f8 <__floatsisf+0x1c>
     708:	fa f4       	brpl	.+62     	; 0x748 <__floatsisf+0x6c>
     70a:	bb 0f       	add	r27, r27
     70c:	11 f4       	brne	.+4      	; 0x712 <__floatsisf+0x36>
     70e:	60 ff       	sbrs	r22, 0
     710:	1b c0       	rjmp	.+54     	; 0x748 <__floatsisf+0x6c>
     712:	6f 5f       	subi	r22, 0xFF	; 255
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	8f 4f       	sbci	r24, 0xFF	; 255
     718:	9f 4f       	sbci	r25, 0xFF	; 255
     71a:	16 c0       	rjmp	.+44     	; 0x748 <__floatsisf+0x6c>
     71c:	88 23       	and	r24, r24
     71e:	11 f0       	breq	.+4      	; 0x724 <__floatsisf+0x48>
     720:	96 e9       	ldi	r25, 0x96	; 150
     722:	11 c0       	rjmp	.+34     	; 0x746 <__floatsisf+0x6a>
     724:	77 23       	and	r23, r23
     726:	21 f0       	breq	.+8      	; 0x730 <__floatsisf+0x54>
     728:	9e e8       	ldi	r25, 0x8E	; 142
     72a:	87 2f       	mov	r24, r23
     72c:	76 2f       	mov	r23, r22
     72e:	05 c0       	rjmp	.+10     	; 0x73a <__floatsisf+0x5e>
     730:	66 23       	and	r22, r22
     732:	71 f0       	breq	.+28     	; 0x750 <__floatsisf+0x74>
     734:	96 e8       	ldi	r25, 0x86	; 134
     736:	86 2f       	mov	r24, r22
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	2a f0       	brmi	.+10     	; 0x748 <__floatsisf+0x6c>
     73e:	9a 95       	dec	r25
     740:	66 0f       	add	r22, r22
     742:	77 1f       	adc	r23, r23
     744:	88 1f       	adc	r24, r24
     746:	da f7       	brpl	.-10     	; 0x73e <__floatsisf+0x62>
     748:	88 0f       	add	r24, r24
     74a:	96 95       	lsr	r25
     74c:	87 95       	ror	r24
     74e:	97 f9       	bld	r25, 7
     750:	08 95       	ret

00000752 <__fp_inf>:
     752:	97 f9       	bld	r25, 7
     754:	9f 67       	ori	r25, 0x7F	; 127
     756:	80 e8       	ldi	r24, 0x80	; 128
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	08 95       	ret

0000075e <__fp_nan>:
     75e:	9f ef       	ldi	r25, 0xFF	; 255
     760:	80 ec       	ldi	r24, 0xC0	; 192
     762:	08 95       	ret

00000764 <__fp_pscA>:
     764:	00 24       	eor	r0, r0
     766:	0a 94       	dec	r0
     768:	16 16       	cp	r1, r22
     76a:	17 06       	cpc	r1, r23
     76c:	18 06       	cpc	r1, r24
     76e:	09 06       	cpc	r0, r25
     770:	08 95       	ret

00000772 <__fp_pscB>:
     772:	00 24       	eor	r0, r0
     774:	0a 94       	dec	r0
     776:	12 16       	cp	r1, r18
     778:	13 06       	cpc	r1, r19
     77a:	14 06       	cpc	r1, r20
     77c:	05 06       	cpc	r0, r21
     77e:	08 95       	ret

00000780 <__fp_round>:
     780:	09 2e       	mov	r0, r25
     782:	03 94       	inc	r0
     784:	00 0c       	add	r0, r0
     786:	11 f4       	brne	.+4      	; 0x78c <__fp_round+0xc>
     788:	88 23       	and	r24, r24
     78a:	52 f0       	brmi	.+20     	; 0x7a0 <__fp_round+0x20>
     78c:	bb 0f       	add	r27, r27
     78e:	40 f4       	brcc	.+16     	; 0x7a0 <__fp_round+0x20>
     790:	bf 2b       	or	r27, r31
     792:	11 f4       	brne	.+4      	; 0x798 <__fp_round+0x18>
     794:	60 ff       	sbrs	r22, 0
     796:	04 c0       	rjmp	.+8      	; 0x7a0 <__fp_round+0x20>
     798:	6f 5f       	subi	r22, 0xFF	; 255
     79a:	7f 4f       	sbci	r23, 0xFF	; 255
     79c:	8f 4f       	sbci	r24, 0xFF	; 255
     79e:	9f 4f       	sbci	r25, 0xFF	; 255
     7a0:	08 95       	ret

000007a2 <__fp_split3>:
     7a2:	57 fd       	sbrc	r21, 7
     7a4:	90 58       	subi	r25, 0x80	; 128
     7a6:	44 0f       	add	r20, r20
     7a8:	55 1f       	adc	r21, r21
     7aa:	59 f0       	breq	.+22     	; 0x7c2 <__fp_splitA+0x10>
     7ac:	5f 3f       	cpi	r21, 0xFF	; 255
     7ae:	71 f0       	breq	.+28     	; 0x7cc <__fp_splitA+0x1a>
     7b0:	47 95       	ror	r20

000007b2 <__fp_splitA>:
     7b2:	88 0f       	add	r24, r24
     7b4:	97 fb       	bst	r25, 7
     7b6:	99 1f       	adc	r25, r25
     7b8:	61 f0       	breq	.+24     	; 0x7d2 <__fp_splitA+0x20>
     7ba:	9f 3f       	cpi	r25, 0xFF	; 255
     7bc:	79 f0       	breq	.+30     	; 0x7dc <__fp_splitA+0x2a>
     7be:	87 95       	ror	r24
     7c0:	08 95       	ret
     7c2:	12 16       	cp	r1, r18
     7c4:	13 06       	cpc	r1, r19
     7c6:	14 06       	cpc	r1, r20
     7c8:	55 1f       	adc	r21, r21
     7ca:	f2 cf       	rjmp	.-28     	; 0x7b0 <__fp_split3+0xe>
     7cc:	46 95       	lsr	r20
     7ce:	f1 df       	rcall	.-30     	; 0x7b2 <__fp_splitA>
     7d0:	08 c0       	rjmp	.+16     	; 0x7e2 <__fp_splitA+0x30>
     7d2:	16 16       	cp	r1, r22
     7d4:	17 06       	cpc	r1, r23
     7d6:	18 06       	cpc	r1, r24
     7d8:	99 1f       	adc	r25, r25
     7da:	f1 cf       	rjmp	.-30     	; 0x7be <__fp_splitA+0xc>
     7dc:	86 95       	lsr	r24
     7de:	71 05       	cpc	r23, r1
     7e0:	61 05       	cpc	r22, r1
     7e2:	08 94       	sec
     7e4:	08 95       	ret

000007e6 <__fp_zero>:
     7e6:	e8 94       	clt

000007e8 <__fp_szero>:
     7e8:	bb 27       	eor	r27, r27
     7ea:	66 27       	eor	r22, r22
     7ec:	77 27       	eor	r23, r23
     7ee:	cb 01       	movw	r24, r22
     7f0:	97 f9       	bld	r25, 7
     7f2:	08 95       	ret
     7f4:	16 f0       	brts	.+4      	; 0x7fa <__fp_szero+0x12>
     7f6:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_mpack>
     7fa:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_nan>
     7fe:	68 94       	set
     800:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>

00000804 <log>:
     804:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fp_splitA>
     808:	a8 f3       	brcs	.-22     	; 0x7f4 <__fp_szero+0xc>
     80a:	99 23       	and	r25, r25
     80c:	c1 f3       	breq	.-16     	; 0x7fe <__fp_szero+0x16>
     80e:	ae f3       	brts	.-22     	; 0x7fa <__fp_szero+0x12>
     810:	df 93       	push	r29
     812:	cf 93       	push	r28
     814:	1f 93       	push	r17
     816:	0f 93       	push	r16
     818:	ff 92       	push	r15
     81a:	c9 2f       	mov	r28, r25
     81c:	dd 27       	eor	r29, r29
     81e:	88 23       	and	r24, r24
     820:	2a f0       	brmi	.+10     	; 0x82c <log+0x28>
     822:	21 97       	sbiw	r28, 0x01	; 1
     824:	66 0f       	add	r22, r22
     826:	77 1f       	adc	r23, r23
     828:	88 1f       	adc	r24, r24
     82a:	da f7       	brpl	.-10     	; 0x822 <log+0x1e>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e8       	ldi	r20, 0x80	; 128
     832:	5f eb       	ldi	r21, 0xBF	; 191
     834:	9f e3       	ldi	r25, 0x3F	; 63
     836:	88 39       	cpi	r24, 0x98	; 152
     838:	20 f0       	brcs	.+8      	; 0x842 <log+0x3e>
     83a:	80 3e       	cpi	r24, 0xE0	; 224
     83c:	38 f0       	brcs	.+14     	; 0x84c <log+0x48>
     83e:	21 96       	adiw	r28, 0x01	; 1
     840:	8f 77       	andi	r24, 0x7F	; 127
     842:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__addsf3>
     846:	e8 e6       	ldi	r30, 0x68	; 104
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	04 c0       	rjmp	.+8      	; 0x854 <log+0x50>
     84c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__addsf3>
     850:	e5 e9       	ldi	r30, 0x95	; 149
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_powser>
     858:	8b 01       	movw	r16, r22
     85a:	be 01       	movw	r22, r28
     85c:	ec 01       	movw	r28, r24
     85e:	fb 2e       	mov	r15, r27
     860:	6f 57       	subi	r22, 0x7F	; 127
     862:	71 09       	sbc	r23, r1
     864:	75 95       	asr	r23
     866:	77 1f       	adc	r23, r23
     868:	88 0b       	sbc	r24, r24
     86a:	99 0b       	sbc	r25, r25
     86c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__floatsisf>
     870:	28 e1       	ldi	r18, 0x18	; 24
     872:	32 e7       	ldi	r19, 0x72	; 114
     874:	41 e3       	ldi	r20, 0x31	; 49
     876:	5f e3       	ldi	r21, 0x3F	; 63
     878:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__mulsf3x>
     87c:	af 2d       	mov	r26, r15
     87e:	98 01       	movw	r18, r16
     880:	ae 01       	movw	r20, r28
     882:	ff 90       	pop	r15
     884:	0f 91       	pop	r16
     886:	1f 91       	pop	r17
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3x>
     890:	0c 94 c0 03 	jmp	0x780	; 0x780 <__fp_round>

00000894 <__mulsf3>:
     894:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__mulsf3x>
     898:	0c 94 c0 03 	jmp	0x780	; 0x780 <__fp_round>
     89c:	0e 94 b2 03 	call	0x764	; 0x764 <__fp_pscA>
     8a0:	38 f0       	brcs	.+14     	; 0x8b0 <__mulsf3+0x1c>
     8a2:	0e 94 b9 03 	call	0x772	; 0x772 <__fp_pscB>
     8a6:	20 f0       	brcs	.+8      	; 0x8b0 <__mulsf3+0x1c>
     8a8:	95 23       	and	r25, r21
     8aa:	11 f0       	breq	.+4      	; 0x8b0 <__mulsf3+0x1c>
     8ac:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
     8b0:	0c 94 af 03 	jmp	0x75e	; 0x75e <__fp_nan>
     8b4:	11 24       	eor	r1, r1
     8b6:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_szero>

000008ba <__mulsf3x>:
     8ba:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_split3>
     8be:	70 f3       	brcs	.-36     	; 0x89c <__mulsf3+0x8>

000008c0 <__mulsf3_pse>:
     8c0:	95 9f       	mul	r25, r21
     8c2:	c1 f3       	breq	.-16     	; 0x8b4 <__mulsf3+0x20>
     8c4:	95 0f       	add	r25, r21
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	55 1f       	adc	r21, r21
     8ca:	62 9f       	mul	r22, r18
     8cc:	f0 01       	movw	r30, r0
     8ce:	72 9f       	mul	r23, r18
     8d0:	bb 27       	eor	r27, r27
     8d2:	f0 0d       	add	r31, r0
     8d4:	b1 1d       	adc	r27, r1
     8d6:	63 9f       	mul	r22, r19
     8d8:	aa 27       	eor	r26, r26
     8da:	f0 0d       	add	r31, r0
     8dc:	b1 1d       	adc	r27, r1
     8de:	aa 1f       	adc	r26, r26
     8e0:	64 9f       	mul	r22, r20
     8e2:	66 27       	eor	r22, r22
     8e4:	b0 0d       	add	r27, r0
     8e6:	a1 1d       	adc	r26, r1
     8e8:	66 1f       	adc	r22, r22
     8ea:	82 9f       	mul	r24, r18
     8ec:	22 27       	eor	r18, r18
     8ee:	b0 0d       	add	r27, r0
     8f0:	a1 1d       	adc	r26, r1
     8f2:	62 1f       	adc	r22, r18
     8f4:	73 9f       	mul	r23, r19
     8f6:	b0 0d       	add	r27, r0
     8f8:	a1 1d       	adc	r26, r1
     8fa:	62 1f       	adc	r22, r18
     8fc:	83 9f       	mul	r24, r19
     8fe:	a0 0d       	add	r26, r0
     900:	61 1d       	adc	r22, r1
     902:	22 1f       	adc	r18, r18
     904:	74 9f       	mul	r23, r20
     906:	33 27       	eor	r19, r19
     908:	a0 0d       	add	r26, r0
     90a:	61 1d       	adc	r22, r1
     90c:	23 1f       	adc	r18, r19
     90e:	84 9f       	mul	r24, r20
     910:	60 0d       	add	r22, r0
     912:	21 1d       	adc	r18, r1
     914:	82 2f       	mov	r24, r18
     916:	76 2f       	mov	r23, r22
     918:	6a 2f       	mov	r22, r26
     91a:	11 24       	eor	r1, r1
     91c:	9f 57       	subi	r25, 0x7F	; 127
     91e:	50 40       	sbci	r21, 0x00	; 0
     920:	9a f0       	brmi	.+38     	; 0x948 <__stack+0x49>
     922:	f1 f0       	breq	.+60     	; 0x960 <__stack+0x61>
     924:	88 23       	and	r24, r24
     926:	4a f0       	brmi	.+18     	; 0x93a <__stack+0x3b>
     928:	ee 0f       	add	r30, r30
     92a:	ff 1f       	adc	r31, r31
     92c:	bb 1f       	adc	r27, r27
     92e:	66 1f       	adc	r22, r22
     930:	77 1f       	adc	r23, r23
     932:	88 1f       	adc	r24, r24
     934:	91 50       	subi	r25, 0x01	; 1
     936:	50 40       	sbci	r21, 0x00	; 0
     938:	a9 f7       	brne	.-22     	; 0x924 <__stack+0x25>
     93a:	9e 3f       	cpi	r25, 0xFE	; 254
     93c:	51 05       	cpc	r21, r1
     93e:	80 f0       	brcs	.+32     	; 0x960 <__stack+0x61>
     940:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_inf>
     944:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_szero>
     948:	5f 3f       	cpi	r21, 0xFF	; 255
     94a:	e4 f3       	brlt	.-8      	; 0x944 <__stack+0x45>
     94c:	98 3e       	cpi	r25, 0xE8	; 232
     94e:	d4 f3       	brlt	.-12     	; 0x944 <__stack+0x45>
     950:	86 95       	lsr	r24
     952:	77 95       	ror	r23
     954:	67 95       	ror	r22
     956:	b7 95       	ror	r27
     958:	f7 95       	ror	r31
     95a:	e7 95       	ror	r30
     95c:	9f 5f       	subi	r25, 0xFF	; 255
     95e:	c1 f7       	brne	.-16     	; 0x950 <__stack+0x51>
     960:	fe 2b       	or	r31, r30
     962:	88 0f       	add	r24, r24
     964:	91 1d       	adc	r25, r1
     966:	96 95       	lsr	r25
     968:	87 95       	ror	r24
     96a:	97 f9       	bld	r25, 7
     96c:	08 95       	ret

0000096e <__fp_mpack>:
     96e:	9f 3f       	cpi	r25, 0xFF	; 255
     970:	31 f0       	breq	.+12     	; 0x97e <__fp_mpack_finite+0xc>

00000972 <__fp_mpack_finite>:
     972:	91 50       	subi	r25, 0x01	; 1
     974:	20 f4       	brcc	.+8      	; 0x97e <__fp_mpack_finite+0xc>
     976:	87 95       	ror	r24
     978:	77 95       	ror	r23
     97a:	67 95       	ror	r22
     97c:	b7 95       	ror	r27
     97e:	88 0f       	add	r24, r24
     980:	91 1d       	adc	r25, r1
     982:	96 95       	lsr	r25
     984:	87 95       	ror	r24
     986:	97 f9       	bld	r25, 7
     988:	08 95       	ret

0000098a <__fp_powser>:
     98a:	df 93       	push	r29
     98c:	cf 93       	push	r28
     98e:	1f 93       	push	r17
     990:	0f 93       	push	r16
     992:	ff 92       	push	r15
     994:	ef 92       	push	r14
     996:	df 92       	push	r13
     998:	7b 01       	movw	r14, r22
     99a:	8c 01       	movw	r16, r24
     99c:	68 94       	set
     99e:	06 c0       	rjmp	.+12     	; 0x9ac <__fp_powser+0x22>
     9a0:	da 2e       	mov	r13, r26
     9a2:	ef 01       	movw	r28, r30
     9a4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__mulsf3x>
     9a8:	fe 01       	movw	r30, r28
     9aa:	e8 94       	clt
     9ac:	a5 91       	lpm	r26, Z+
     9ae:	25 91       	lpm	r18, Z+
     9b0:	35 91       	lpm	r19, Z+
     9b2:	45 91       	lpm	r20, Z+
     9b4:	55 91       	lpm	r21, Z+
     9b6:	a6 f3       	brts	.-24     	; 0x9a0 <__fp_powser+0x16>
     9b8:	ef 01       	movw	r28, r30
     9ba:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3x>
     9be:	fe 01       	movw	r30, r28
     9c0:	97 01       	movw	r18, r14
     9c2:	a8 01       	movw	r20, r16
     9c4:	da 94       	dec	r13
     9c6:	69 f7       	brne	.-38     	; 0x9a2 <__fp_powser+0x18>
     9c8:	df 90       	pop	r13
     9ca:	ef 90       	pop	r14
     9cc:	ff 90       	pop	r15
     9ce:	0f 91       	pop	r16
     9d0:	1f 91       	pop	r17
     9d2:	cf 91       	pop	r28
     9d4:	df 91       	pop	r29
     9d6:	08 95       	ret

000009d8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     9d8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     9da:	91 8d       	ldd	r25, Z+25	; 0x19
     9dc:	22 8d       	ldd	r18, Z+26	; 0x1a
     9de:	89 2f       	mov	r24, r25
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	80 5c       	subi	r24, 0xC0	; 192
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	82 1b       	sub	r24, r18
     9e8:	91 09       	sbc	r25, r1
}
     9ea:	8f 73       	andi	r24, 0x3F	; 63
     9ec:	99 27       	eor	r25, r25
     9ee:	08 95       	ret

000009f0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     9f0:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     9f2:	91 8d       	ldd	r25, Z+25	; 0x19
     9f4:	82 8d       	ldd	r24, Z+26	; 0x1a
     9f6:	98 17       	cp	r25, r24
     9f8:	31 f0       	breq	.+12     	; 0xa06 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     9fa:	82 8d       	ldd	r24, Z+26	; 0x1a
     9fc:	e8 0f       	add	r30, r24
     9fe:	f1 1d       	adc	r31, r1
     a00:	85 8d       	ldd	r24, Z+29	; 0x1d
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     a0a:	08 95       	ret

00000a0c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     a0c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     a0e:	91 8d       	ldd	r25, Z+25	; 0x19
     a10:	82 8d       	ldd	r24, Z+26	; 0x1a
     a12:	98 17       	cp	r25, r24
     a14:	61 f0       	breq	.+24     	; 0xa2e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     a16:	82 8d       	ldd	r24, Z+26	; 0x1a
     a18:	df 01       	movw	r26, r30
     a1a:	a8 0f       	add	r26, r24
     a1c:	b1 1d       	adc	r27, r1
     a1e:	5d 96       	adiw	r26, 0x1d	; 29
     a20:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a22:	92 8d       	ldd	r25, Z+26	; 0x1a
     a24:	9f 5f       	subi	r25, 0xFF	; 255
     a26:	9f 73       	andi	r25, 0x3F	; 63
     a28:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a2e:	8f ef       	ldi	r24, 0xFF	; 255
     a30:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     a32:	08 95       	ret

00000a34 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a34:	8f e6       	ldi	r24, 0x6F	; 111
     a36:	96 e0       	ldi	r25, 0x06	; 6
     a38:	89 2b       	or	r24, r25
     a3a:	49 f0       	breq	.+18     	; 0xa4e <_Z14serialEventRunv+0x1a>
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	89 2b       	or	r24, r25
     a42:	29 f0       	breq	.+10     	; 0xa4e <_Z14serialEventRunv+0x1a>
     a44:	0e 94 6f 06 	call	0xcde	; 0xcde <_Z17Serial0_availablev>
     a48:	81 11       	cpse	r24, r1
     a4a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     a4e:	08 95       	ret

00000a50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     a50:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     a52:	84 8d       	ldd	r24, Z+28	; 0x1c
     a54:	df 01       	movw	r26, r30
     a56:	a8 0f       	add	r26, r24
     a58:	b1 1d       	adc	r27, r1
     a5a:	a3 5a       	subi	r26, 0xA3	; 163
     a5c:	bf 4f       	sbci	r27, 0xFF	; 255
     a5e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     a60:	84 8d       	ldd	r24, Z+28	; 0x1c
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	8f 73       	andi	r24, 0x3F	; 63
     a68:	99 27       	eor	r25, r25
     a6a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     a6c:	a6 89       	ldd	r26, Z+22	; 0x16
     a6e:	b7 89       	ldd	r27, Z+23	; 0x17
     a70:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     a72:	a0 89       	ldd	r26, Z+16	; 0x10
     a74:	b1 89       	ldd	r27, Z+17	; 0x11
     a76:	8c 91       	ld	r24, X
     a78:	80 64       	ori	r24, 0x40	; 64
     a7a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     a7c:	93 8d       	ldd	r25, Z+27	; 0x1b
     a7e:	84 8d       	ldd	r24, Z+28	; 0x1c
     a80:	98 13       	cpse	r25, r24
     a82:	06 c0       	rjmp	.+12     	; 0xa90 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     a84:	02 88       	ldd	r0, Z+18	; 0x12
     a86:	f3 89       	ldd	r31, Z+19	; 0x13
     a88:	e0 2d       	mov	r30, r0
     a8a:	80 81       	ld	r24, Z
     a8c:	8f 7d       	andi	r24, 0xDF	; 223
     a8e:	80 83       	st	Z, r24
     a90:	08 95       	ret

00000a92 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a98:	88 8d       	ldd	r24, Y+24	; 0x18
     a9a:	88 23       	and	r24, r24
     a9c:	c9 f0       	breq	.+50     	; 0xad0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a9e:	ea 89       	ldd	r30, Y+18	; 0x12
     aa0:	fb 89       	ldd	r31, Y+19	; 0x13
     aa2:	80 81       	ld	r24, Z
     aa4:	85 fd       	sbrc	r24, 5
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <_ZN14HardwareSerial5flushEv+0x20>
     aa8:	a8 89       	ldd	r26, Y+16	; 0x10
     aaa:	b9 89       	ldd	r27, Y+17	; 0x11
     aac:	8c 91       	ld	r24, X
     aae:	86 fd       	sbrc	r24, 6
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	07 fc       	sbrc	r0, 7
     ab6:	f5 cf       	rjmp	.-22     	; 0xaa2 <_ZN14HardwareSerial5flushEv+0x10>
     ab8:	80 81       	ld	r24, Z
     aba:	85 ff       	sbrs	r24, 5
     abc:	f2 cf       	rjmp	.-28     	; 0xaa2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     abe:	a8 89       	ldd	r26, Y+16	; 0x10
     ac0:	b9 89       	ldd	r27, Y+17	; 0x11
     ac2:	8c 91       	ld	r24, X
     ac4:	85 ff       	sbrs	r24, 5
     ac6:	ed cf       	rjmp	.-38     	; 0xaa2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     ac8:	ce 01       	movw	r24, r28
     aca:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     ace:	e7 cf       	rjmp	.-50     	; 0xa9e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	ec 01       	movw	r28, r24
  _written = true;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     ae8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     aea:	8c 8d       	ldd	r24, Y+28	; 0x1c
     aec:	98 13       	cpse	r25, r24
     aee:	05 c0       	rjmp	.+10     	; 0xafa <_ZN14HardwareSerial5writeEh+0x24>
     af0:	e8 89       	ldd	r30, Y+16	; 0x10
     af2:	f9 89       	ldd	r31, Y+17	; 0x11
     af4:	80 81       	ld	r24, Z
     af6:	85 fd       	sbrc	r24, 5
     af8:	24 c0       	rjmp	.+72     	; 0xb42 <_ZN14HardwareSerial5writeEh+0x6c>
     afa:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     afc:	0b 8d       	ldd	r16, Y+27	; 0x1b
     afe:	10 e0       	ldi	r17, 0x00	; 0
     b00:	0f 5f       	subi	r16, 0xFF	; 255
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	0f 73       	andi	r16, 0x3F	; 63
     b06:	11 27       	eor	r17, r17
     b08:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b0c:	e8 12       	cpse	r14, r24
     b0e:	0c c0       	rjmp	.+24     	; 0xb28 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	07 fc       	sbrc	r0, 7
     b14:	fa cf       	rjmp	.-12     	; 0xb0a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b16:	e8 89       	ldd	r30, Y+16	; 0x10
     b18:	f9 89       	ldd	r31, Y+17	; 0x11
     b1a:	80 81       	ld	r24, Z
     b1c:	85 ff       	sbrs	r24, 5
     b1e:	f5 cf       	rjmp	.-22     	; 0xb0a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     b20:	ce 01       	movw	r24, r28
     b22:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b26:	f1 cf       	rjmp	.-30     	; 0xb0a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b2a:	fe 01       	movw	r30, r28
     b2c:	e8 0f       	add	r30, r24
     b2e:	f1 1d       	adc	r31, r1
     b30:	e3 5a       	subi	r30, 0xA3	; 163
     b32:	ff 4f       	sbci	r31, 0xFF	; 255
     b34:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     b36:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     b38:	ea 89       	ldd	r30, Y+18	; 0x12
     b3a:	fb 89       	ldd	r31, Y+19	; 0x13
     b3c:	80 81       	ld	r24, Z
     b3e:	80 62       	ori	r24, 0x20	; 32
     b40:	07 c0       	rjmp	.+14     	; 0xb50 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     b42:	ee 89       	ldd	r30, Y+22	; 0x16
     b44:	ff 89       	ldd	r31, Y+23	; 0x17
     b46:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     b48:	e8 89       	ldd	r30, Y+16	; 0x10
     b4a:	f9 89       	ldd	r31, Y+17	; 0x11
     b4c:	80 81       	ld	r24, Z
     b4e:	80 64       	ori	r24, 0x40	; 64
     b50:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	08 95       	ret

00000b64 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	ec 01       	movw	r28, r24
     b74:	6a 01       	movw	r12, r20
     b76:	7b 01       	movw	r14, r22
     b78:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     b7a:	e8 89       	ldd	r30, Y+16	; 0x10
     b7c:	f9 89       	ldd	r31, Y+17	; 0x11
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     b82:	41 15       	cp	r20, r1
     b84:	51 4e       	sbci	r21, 0xE1	; 225
     b86:	61 05       	cpc	r22, r1
     b88:	71 05       	cpc	r23, r1
     b8a:	b1 f0       	breq	.+44     	; 0xbb8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	79 e0       	ldi	r23, 0x09	; 9
     b90:	8d e3       	ldi	r24, 0x3D	; 61
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a7 01       	movw	r20, r14
     b96:	96 01       	movw	r18, r12
     b98:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__udivmodsi4>
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	a1 09       	sbc	r26, r1
     ba4:	b1 09       	sbc	r27, r1
     ba6:	b6 95       	lsr	r27
     ba8:	a7 95       	ror	r26
     baa:	97 95       	ror	r25
     bac:	87 95       	ror	r24
     bae:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     bb0:	41 15       	cp	r20, r1
     bb2:	80 e1       	ldi	r24, 0x10	; 16
     bb4:	58 07       	cpc	r21, r24
     bb6:	a8 f0       	brcs	.+42     	; 0xbe2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     bb8:	e8 89       	ldd	r30, Y+16	; 0x10
     bba:	f9 89       	ldd	r31, Y+17	; 0x11
     bbc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     bbe:	60 e8       	ldi	r22, 0x80	; 128
     bc0:	74 e8       	ldi	r23, 0x84	; 132
     bc2:	8e e1       	ldi	r24, 0x1E	; 30
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a7 01       	movw	r20, r14
     bc8:	96 01       	movw	r18, r12
     bca:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__udivmodsi4>
     bce:	ba 01       	movw	r22, r20
     bd0:	a9 01       	movw	r20, r18
     bd2:	41 50       	subi	r20, 0x01	; 1
     bd4:	51 09       	sbc	r21, r1
     bd6:	61 09       	sbc	r22, r1
     bd8:	71 09       	sbc	r23, r1
     bda:	76 95       	lsr	r23
     bdc:	67 95       	ror	r22
     bde:	57 95       	ror	r21
     be0:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     be2:	ec 85       	ldd	r30, Y+12	; 0x0c
     be4:	fd 85       	ldd	r31, Y+13	; 0x0d
     be6:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
     be8:	ee 85       	ldd	r30, Y+14	; 0x0e
     bea:	ff 85       	ldd	r31, Y+15	; 0x0f
     bec:	40 83       	st	Z, r20

  _written = false;
     bee:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     bf0:	ec 89       	ldd	r30, Y+20	; 0x14
     bf2:	fd 89       	ldd	r31, Y+21	; 0x15
     bf4:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     bf6:	ea 89       	ldd	r30, Y+18	; 0x12
     bf8:	fb 89       	ldd	r31, Y+19	; 0x13
     bfa:	80 81       	ld	r24, Z
     bfc:	80 61       	ori	r24, 0x10	; 16
     bfe:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     c00:	ea 89       	ldd	r30, Y+18	; 0x12
     c02:	fb 89       	ldd	r31, Y+19	; 0x13
     c04:	80 81       	ld	r24, Z
     c06:	88 60       	ori	r24, 0x08	; 8
     c08:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c0a:	ea 89       	ldd	r30, Y+18	; 0x12
     c0c:	fb 89       	ldd	r31, Y+19	; 0x13
     c0e:	80 81       	ld	r24, Z
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c14:	ea 89       	ldd	r30, Y+18	; 0x12
     c16:	fb 89       	ldd	r31, Y+19	; 0x13
     c18:	80 81       	ld	r24, Z
     c1a:	8f 7d       	andi	r24, 0xDF	; 223
     c1c:	80 83       	st	Z, r24
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	cf 90       	pop	r12
     c2c:	08 95       	ret

00000c2e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	2f 93       	push	r18
     c3a:	8f 93       	push	r24
     c3c:	9f 93       	push	r25
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     c42:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <Serial+0x10>
     c46:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <Serial+0x11>
     c4a:	80 81       	ld	r24, Z
     c4c:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <Serial+0x16>
     c50:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <Serial+0x17>
     c54:	82 fd       	sbrc	r24, 2
     c56:	12 c0       	rjmp	.+36     	; 0xc7c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     c58:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     c5a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <Serial+0x19>
     c5e:	8f 5f       	subi	r24, 0xFF	; 255
     c60:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     c62:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <Serial+0x1a>
     c66:	82 17       	cp	r24, r18
     c68:	51 f0       	breq	.+20     	; 0xc7e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     c6a:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <Serial+0x19>
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	ec 56       	subi	r30, 0x6C	; 108
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     c76:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <Serial+0x19>
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     c7c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	9f 91       	pop	r25
     c84:	8f 91       	pop	r24
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	0f 92       	push	r0
     c9a:	11 24       	eor	r1, r1
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	5f 93       	push	r21
     ca4:	6f 93       	push	r22
     ca6:	7f 93       	push	r23
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     cb4:	84 e9       	ldi	r24, 0x94	; 148
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	0e 94 28 05 	call	0xa50	; 0xa50 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	bf 91       	pop	r27
     cc2:	af 91       	pop	r26
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	7f 91       	pop	r23
     cca:	6f 91       	pop	r22
     ccc:	5f 91       	pop	r21
     cce:	4f 91       	pop	r20
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     cde:	84 e9       	ldi	r24, 0x94	; 148
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <_ZN14HardwareSerial9availableEv>
     ce6:	21 e0       	ldi	r18, 0x01	; 1
     ce8:	89 2b       	or	r24, r25
     cea:	09 f4       	brne	.+2      	; 0xcee <_Z17Serial0_availablev+0x10>
     cec:	20 e0       	ldi	r18, 0x00	; 0
}
     cee:	82 2f       	mov	r24, r18
     cf0:	08 95       	ret

00000cf2 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     cf2:	e4 e9       	ldi	r30, 0x94	; 148
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	13 82       	std	Z+3, r1	; 0x03
     cf8:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     cfa:	88 ee       	ldi	r24, 0xE8	; 232
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	84 83       	std	Z+4, r24	; 0x04
     d04:	95 83       	std	Z+5, r25	; 0x05
     d06:	a6 83       	std	Z+6, r26	; 0x06
     d08:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     d0a:	86 e6       	ldi	r24, 0x66	; 102
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	80 83       	st	Z, r24
     d12:	85 ec       	ldi	r24, 0xC5	; 197
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	95 87       	std	Z+13, r25	; 0x0d
     d18:	84 87       	std	Z+12, r24	; 0x0c
     d1a:	84 ec       	ldi	r24, 0xC4	; 196
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	97 87       	std	Z+15, r25	; 0x0f
     d20:	86 87       	std	Z+14, r24	; 0x0e
     d22:	80 ec       	ldi	r24, 0xC0	; 192
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	91 8b       	std	Z+17, r25	; 0x11
     d28:	80 8b       	std	Z+16, r24	; 0x10
     d2a:	81 ec       	ldi	r24, 0xC1	; 193
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	93 8b       	std	Z+19, r25	; 0x13
     d30:	82 8b       	std	Z+18, r24	; 0x12
     d32:	82 ec       	ldi	r24, 0xC2	; 194
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	95 8b       	std	Z+21, r25	; 0x15
     d38:	84 8b       	std	Z+20, r24	; 0x14
     d3a:	86 ec       	ldi	r24, 0xC6	; 198
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	97 8b       	std	Z+23, r25	; 0x17
     d40:	86 8b       	std	Z+22, r24	; 0x16
     d42:	11 8e       	std	Z+25, r1	; 0x19
     d44:	12 8e       	std	Z+26, r1	; 0x1a
     d46:	13 8e       	std	Z+27, r1	; 0x1b
     d48:	14 8e       	std	Z+28, r1	; 0x1c
     d4a:	08 95       	ret

00000d4c <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     d4c:	08 95       	ret

00000d4e <main>:

int main(void)
{
	init();
     d4e:	0e 94 4a 09 	call	0x1294	; 0x1294 <init>

	initVariant();
     d52:	0e 94 a6 06 	call	0xd4c	; 0xd4c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     d56:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     d5a:	ca e1       	ldi	r28, 0x1A	; 26
     d5c:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     d5e:	0e 94 33 02 	call	0x466	; 0x466 <loop>
		if (serialEventRun) serialEventRun();
     d62:	20 97       	sbiw	r28, 0x00	; 0
     d64:	e1 f3       	breq	.-8      	; 0xd5e <main+0x10>
     d66:	0e 94 1a 05 	call	0xa34	; 0xa34 <_Z14serialEventRunv>
     d6a:	f9 cf       	rjmp	.-14     	; 0xd5e <main+0x10>

00000d6c <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     d6c:	cf 92       	push	r12
     d6e:	df 92       	push	r13
     d70:	ef 92       	push	r14
     d72:	ff 92       	push	r15
     d74:	0f 93       	push	r16
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	6c 01       	movw	r12, r24
     d7e:	7a 01       	movw	r14, r20
     d80:	8b 01       	movw	r16, r22
     d82:	c0 e0       	ldi	r28, 0x00	; 0
     d84:	d0 e0       	ldi	r29, 0x00	; 0
     d86:	ce 15       	cp	r28, r14
     d88:	df 05       	cpc	r29, r15
     d8a:	89 f0       	breq	.+34     	; 0xdae <_ZN5Print5writeEPKhj+0x42>
     d8c:	d8 01       	movw	r26, r16
     d8e:	6d 91       	ld	r22, X+
     d90:	8d 01       	movw	r16, r26
     d92:	d6 01       	movw	r26, r12
     d94:	ed 91       	ld	r30, X+
     d96:	fc 91       	ld	r31, X
     d98:	01 90       	ld	r0, Z+
     d9a:	f0 81       	ld	r31, Z
     d9c:	e0 2d       	mov	r30, r0
     d9e:	c6 01       	movw	r24, r12
     da0:	09 95       	icall
     da2:	89 2b       	or	r24, r25
     da4:	11 f4       	brne	.+4      	; 0xdaa <_ZN5Print5writeEPKhj+0x3e>
     da6:	7e 01       	movw	r14, r28
     da8:	02 c0       	rjmp	.+4      	; 0xdae <_ZN5Print5writeEPKhj+0x42>
     daa:	21 96       	adiw	r28, 0x01	; 1
     dac:	ec cf       	rjmp	.-40     	; 0xd86 <_ZN5Print5writeEPKhj+0x1a>
     dae:	c7 01       	movw	r24, r14
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	df 90       	pop	r13
     dbe:	cf 90       	pop	r12
     dc0:	08 95       	ret

00000dc2 <_ZN5Print5writeEPKc>:
     dc2:	61 15       	cp	r22, r1
     dc4:	71 05       	cpc	r23, r1
     dc6:	79 f0       	breq	.+30     	; 0xde6 <_ZN5Print5writeEPKc+0x24>
     dc8:	fb 01       	movw	r30, r22
     dca:	01 90       	ld	r0, Z+
     dcc:	00 20       	and	r0, r0
     dce:	e9 f7       	brne	.-6      	; 0xdca <_ZN5Print5writeEPKc+0x8>
     dd0:	31 97       	sbiw	r30, 0x01	; 1
     dd2:	af 01       	movw	r20, r30
     dd4:	46 1b       	sub	r20, r22
     dd6:	57 0b       	sbc	r21, r23
     dd8:	dc 01       	movw	r26, r24
     dda:	ed 91       	ld	r30, X+
     ddc:	fc 91       	ld	r31, X
     dde:	02 80       	ldd	r0, Z+2	; 0x02
     de0:	f3 81       	ldd	r31, Z+3	; 0x03
     de2:	e0 2d       	mov	r30, r0
     de4:	09 94       	ijmp
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	08 95       	ret

00000dec <_ZN5Print5printEPKc>:
     dec:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <_ZN5Print5writeEPKc>

00000df0 <_ZN5Print5printEc>:
     df0:	dc 01       	movw	r26, r24
     df2:	ed 91       	ld	r30, X+
     df4:	fc 91       	ld	r31, X
     df6:	01 90       	ld	r0, Z+
     df8:	f0 81       	ld	r31, Z
     dfa:	e0 2d       	mov	r30, r0
     dfc:	09 94       	ijmp

00000dfe <_ZN5Print7printlnEv>:
     dfe:	62 e7       	ldi	r22, 0x72	; 114
     e00:	71 e0       	ldi	r23, 0x01	; 1
     e02:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <_ZN5Print5writeEPKc>

00000e06 <_ZN5Print7printlnEPKc>:
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ec 01       	movw	r28, r24
     e10:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN5Print5writeEPKc>
     e14:	8c 01       	movw	r16, r24
     e16:	ce 01       	movw	r24, r28
     e18:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_ZN5Print7printlnEv>
     e1c:	80 0f       	add	r24, r16
     e1e:	91 1f       	adc	r25, r17
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	08 95       	ret

00000e2a <_ZN5Print11printNumberEmh>:
     e2a:	8f 92       	push	r8
     e2c:	9f 92       	push	r9
     e2e:	af 92       	push	r10
     e30:	bf 92       	push	r11
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	a1 97       	sbiw	r28, 0x21	; 33
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	7c 01       	movw	r14, r24
     e54:	d4 2e       	mov	r13, r20
     e56:	c5 2e       	mov	r12, r21
     e58:	db 01       	movw	r26, r22
     e5a:	19 a2       	std	Y+33, r1	; 0x21
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	08 f4       	brcc	.+2      	; 0xe62 <_ZN5Print11printNumberEmh+0x38>
     e60:	2a e0       	ldi	r18, 0x0A	; 10
     e62:	8e 01       	movw	r16, r28
     e64:	0f 5d       	subi	r16, 0xDF	; 223
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	82 2e       	mov	r8, r18
     e6a:	91 2c       	mov	r9, r1
     e6c:	a1 2c       	mov	r10, r1
     e6e:	b1 2c       	mov	r11, r1
     e70:	6d 2d       	mov	r22, r13
     e72:	7c 2d       	mov	r23, r12
     e74:	cd 01       	movw	r24, r26
     e76:	a5 01       	movw	r20, r10
     e78:	94 01       	movw	r18, r8
     e7a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__udivmodsi4>
     e7e:	d2 2e       	mov	r13, r18
     e80:	c3 2e       	mov	r12, r19
     e82:	da 01       	movw	r26, r20
     e84:	01 50       	subi	r16, 0x01	; 1
     e86:	11 09       	sbc	r17, r1
     e88:	6a 30       	cpi	r22, 0x0A	; 10
     e8a:	71 05       	cpc	r23, r1
     e8c:	81 05       	cpc	r24, r1
     e8e:	91 05       	cpc	r25, r1
     e90:	10 f4       	brcc	.+4      	; 0xe96 <_ZN5Print11printNumberEmh+0x6c>
     e92:	60 5d       	subi	r22, 0xD0	; 208
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <_ZN5Print11printNumberEmh+0x6e>
     e96:	69 5c       	subi	r22, 0xC9	; 201
     e98:	f8 01       	movw	r30, r16
     e9a:	60 83       	st	Z, r22
     e9c:	23 2b       	or	r18, r19
     e9e:	24 2b       	or	r18, r20
     ea0:	25 2b       	or	r18, r21
     ea2:	31 f7       	brne	.-52     	; 0xe70 <_ZN5Print11printNumberEmh+0x46>
     ea4:	b8 01       	movw	r22, r16
     ea6:	c7 01       	movw	r24, r14
     ea8:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN5Print5writeEPKc>
     eac:	a1 96       	adiw	r28, 0x21	; 33
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
     ec8:	bf 90       	pop	r11
     eca:	af 90       	pop	r10
     ecc:	9f 90       	pop	r9
     ece:	8f 90       	pop	r8
     ed0:	08 95       	ret

00000ed2 <_ZN5Print5printEli>:
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
     ee4:	6a 01       	movw	r12, r20
     ee6:	7b 01       	movw	r14, r22
     ee8:	21 15       	cp	r18, r1
     eea:	31 05       	cpc	r19, r1
     eec:	79 f4       	brne	.+30     	; 0xf0c <_ZN5Print5printEli+0x3a>
     eee:	e8 81       	ld	r30, Y
     ef0:	f9 81       	ldd	r31, Y+1	; 0x01
     ef2:	01 90       	ld	r0, Z+
     ef4:	f0 81       	ld	r31, Z
     ef6:	e0 2d       	mov	r30, r0
     ef8:	64 2f       	mov	r22, r20
     efa:	df 91       	pop	r29
     efc:	cf 91       	pop	r28
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	cf 90       	pop	r12
     f0a:	09 94       	ijmp
     f0c:	2a 30       	cpi	r18, 0x0A	; 10
     f0e:	31 05       	cpc	r19, r1
     f10:	e9 f4       	brne	.+58     	; 0xf4c <_ZN5Print5printEli+0x7a>
     f12:	77 ff       	sbrs	r23, 7
     f14:	1a c0       	rjmp	.+52     	; 0xf4a <_ZN5Print5printEli+0x78>
     f16:	6d e2       	ldi	r22, 0x2D	; 45
     f18:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN5Print5printEc>
     f1c:	8c 01       	movw	r16, r24
     f1e:	44 27       	eor	r20, r20
     f20:	55 27       	eor	r21, r21
     f22:	ba 01       	movw	r22, r20
     f24:	4c 19       	sub	r20, r12
     f26:	5d 09       	sbc	r21, r13
     f28:	6e 09       	sbc	r22, r14
     f2a:	7f 09       	sbc	r23, r15
     f2c:	2a e0       	ldi	r18, 0x0A	; 10
     f2e:	ce 01       	movw	r24, r28
     f30:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN5Print11printNumberEmh>
     f34:	80 0f       	add	r24, r16
     f36:	91 1f       	adc	r25, r17
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	08 95       	ret
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	b7 01       	movw	r22, r14
     f4e:	a6 01       	movw	r20, r12
     f50:	ce 01       	movw	r24, r28
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <_ZN5Print11printNumberEmh>

00000f66 <_ZN5Print5printEii>:
     f66:	9a 01       	movw	r18, r20
     f68:	ab 01       	movw	r20, r22
     f6a:	77 0f       	add	r23, r23
     f6c:	66 0b       	sbc	r22, r22
     f6e:	77 0b       	sbc	r23, r23
     f70:	0c 94 69 07 	jmp	0xed2	; 0xed2 <_ZN5Print5printEli>

00000f74 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     f74:	4f 92       	push	r4
     f76:	5f 92       	push	r5
     f78:	6f 92       	push	r6
     f7a:	7f 92       	push	r7
     f7c:	8f 92       	push	r8
     f7e:	9f 92       	push	r9
     f80:	af 92       	push	r10
     f82:	bf 92       	push	r11
     f84:	cf 92       	push	r12
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ec 01       	movw	r28, r24
     f92:	6a 01       	movw	r12, r20
     f94:	7b 01       	movw	r14, r22
     f96:	b2 2e       	mov	r11, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     f98:	9a 01       	movw	r18, r20
     f9a:	ab 01       	movw	r20, r22
     f9c:	c7 01       	movw	r24, r14
     f9e:	b6 01       	movw	r22, r12
     fa0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__unordsf2>
     fa4:	88 23       	and	r24, r24
     fa6:	19 f0       	breq	.+6      	; 0xfae <_ZN5Print10printFloatEdh+0x3a>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     fa8:	65 e7       	ldi	r22, 0x75	; 117
     faa:	71 e0       	ldi	r23, 0x01	; 1
     fac:	27 c0       	rjmp	.+78     	; 0xffc <_ZN5Print10printFloatEdh+0x88>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     fae:	26 01       	movw	r4, r12
     fb0:	37 01       	movw	r6, r14
     fb2:	e8 94       	clt
     fb4:	77 f8       	bld	r7, 7
     fb6:	2f ef       	ldi	r18, 0xFF	; 255
     fb8:	3f ef       	ldi	r19, 0xFF	; 255
     fba:	4f e7       	ldi	r20, 0x7F	; 127
     fbc:	5f e7       	ldi	r21, 0x7F	; 127
     fbe:	c3 01       	movw	r24, r6
     fc0:	b2 01       	movw	r22, r4
     fc2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__unordsf2>
     fc6:	81 11       	cpse	r24, r1
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <_ZN5Print10printFloatEdh+0x70>
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f e7       	ldi	r20, 0x7F	; 127
     fd0:	5f e7       	ldi	r21, 0x7F	; 127
     fd2:	c3 01       	movw	r24, r6
     fd4:	b2 01       	movw	r22, r4
     fd6:	0e 94 38 0a 	call	0x1470	; 0x1470 <__cmpsf2>
     fda:	18 16       	cp	r1, r24
     fdc:	1c f4       	brge	.+6      	; 0xfe4 <_ZN5Print10printFloatEdh+0x70>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     fde:	69 e7       	ldi	r22, 0x79	; 121
     fe0:	71 e0       	ldi	r23, 0x01	; 1
     fe2:	0c c0       	rjmp	.+24     	; 0xffc <_ZN5Print10printFloatEdh+0x88>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     fe4:	2f ef       	ldi	r18, 0xFF	; 255
     fe6:	3f ef       	ldi	r19, 0xFF	; 255
     fe8:	4f e7       	ldi	r20, 0x7F	; 127
     fea:	5f e4       	ldi	r21, 0x4F	; 79
     fec:	c7 01       	movw	r24, r14
     fee:	b6 01       	movw	r22, r12
     ff0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <__gesf2>
     ff4:	18 16       	cp	r1, r24
     ff6:	9c f4       	brge	.+38     	; 0x101e <_ZN5Print10printFloatEdh+0xaa>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     ff8:	6d e7       	ldi	r22, 0x7D	; 125
     ffa:	71 e0       	ldi	r23, 0x01	; 1
     ffc:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	9f 90       	pop	r9
    1010:	8f 90       	pop	r8
    1012:	7f 90       	pop	r7
    1014:	6f 90       	pop	r6
    1016:	5f 90       	pop	r5
    1018:	4f 90       	pop	r4
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    101a:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    101e:	2f ef       	ldi	r18, 0xFF	; 255
    1020:	3f ef       	ldi	r19, 0xFF	; 255
    1022:	4f e7       	ldi	r20, 0x7F	; 127
    1024:	5f ec       	ldi	r21, 0xCF	; 207
    1026:	c7 01       	movw	r24, r14
    1028:	b6 01       	movw	r22, r12
    102a:	0e 94 38 0a 	call	0x1470	; 0x1470 <__cmpsf2>
    102e:	87 fd       	sbrc	r24, 7
    1030:	e3 cf       	rjmp	.-58     	; 0xff8 <_ZN5Print10printFloatEdh+0x84>
  
  // Handle negative numbers
  if (number < 0.0)
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	a9 01       	movw	r20, r18
    1038:	c7 01       	movw	r24, r14
    103a:	b6 01       	movw	r22, r12
    103c:	0e 94 38 0a 	call	0x1470	; 0x1470 <__cmpsf2>
    1040:	87 ff       	sbrs	r24, 7
    1042:	0a c0       	rjmp	.+20     	; 0x1058 <_ZN5Print10printFloatEdh+0xe4>
  {
     n += print('-');
    1044:	6d e2       	ldi	r22, 0x2D	; 45
    1046:	ce 01       	movw	r24, r28
    1048:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <_ZN5Print5printEc>
    104c:	4c 01       	movw	r8, r24
     number = -number;
    104e:	f7 fa       	bst	r15, 7
    1050:	f0 94       	com	r15
    1052:	f7 f8       	bld	r15, 7
    1054:	f0 94       	com	r15
    1056:	02 c0       	rjmp	.+4      	; 0x105c <_ZN5Print10printFloatEdh+0xe8>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1058:	81 2c       	mov	r8, r1
    105a:	91 2c       	mov	r9, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    105c:	a1 2c       	mov	r10, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1066:	ab 14       	cp	r10, r11
    1068:	41 f0       	breq	.+16     	; 0x107a <_ZN5Print10printFloatEdh+0x106>
    rounding /= 10.0;
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e2       	ldi	r20, 0x20	; 32
    1070:	51 e4       	ldi	r21, 0x41	; 65
    1072:	0e 94 c4 02 	call	0x588	; 0x588 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1076:	a3 94       	inc	r10
    1078:	f6 cf       	rjmp	.-20     	; 0x1066 <_ZN5Print10printFloatEdh+0xf2>
    rounding /= 10.0;
  
  number += rounding;
    107a:	9b 01       	movw	r18, r22
    107c:	ac 01       	movw	r20, r24
    107e:	c7 01       	movw	r24, r14
    1080:	b6 01       	movw	r22, r12
    1082:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__addsf3>
    1086:	2b 01       	movw	r4, r22
    1088:	3c 01       	movw	r6, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    108a:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixunssfsi>
    108e:	6b 01       	movw	r12, r22
    1090:	7c 01       	movw	r14, r24
  double remainder = number - (double)int_part;
    1092:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__floatunsisf>
    1096:	9b 01       	movw	r18, r22
    1098:	ac 01       	movw	r20, r24
    109a:	c3 01       	movw	r24, r6
    109c:	b2 01       	movw	r22, r4
    109e:	0e 94 57 02 	call	0x4ae	; 0x4ae <__subsf3>
    10a2:	2b 01       	movw	r4, r22
    10a4:	3c 01       	movw	r6, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    10a6:	2a e0       	ldi	r18, 0x0A	; 10
    10a8:	b7 01       	movw	r22, r14
    10aa:	a6 01       	movw	r20, r12
    10ac:	ce 01       	movw	r24, r28
    10ae:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    10b2:	7c 01       	movw	r14, r24
    10b4:	e8 0c       	add	r14, r8
    10b6:	f9 1c       	adc	r15, r9

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    10b8:	bb 20       	and	r11, r11
    10ba:	39 f0       	breq	.+14     	; 0x10ca <_ZN5Print10printFloatEdh+0x156>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    10bc:	6a e2       	ldi	r22, 0x2A	; 42
    10be:	71 e0       	ldi	r23, 0x01	; 1
    10c0:	ce 01       	movw	r24, r28
    10c2:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    10c6:	e8 0e       	add	r14, r24
    10c8:	f9 1e       	adc	r15, r25
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    10ca:	db 2c       	mov	r13, r11
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    10cc:	dd 20       	and	r13, r13
    10ce:	29 f1       	breq	.+74     	; 0x111a <_ZN5Print10printFloatEdh+0x1a6>
  {
    remainder *= 10.0;
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	c3 01       	movw	r24, r6
    10da:	b2 01       	movw	r22, r4
    10dc:	0e 94 4a 04 	call	0x894	; 0x894 <__mulsf3>
    10e0:	2b 01       	movw	r4, r22
    10e2:	3c 01       	movw	r6, r24
    unsigned int toPrint = (unsigned int)(remainder);
    10e4:	0e 94 3d 03 	call	0x67a	; 0x67a <__fixunssfsi>
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    10e8:	4b 01       	movw	r8, r22
    10ea:	a1 2c       	mov	r10, r1
    10ec:	b1 2c       	mov	r11, r1
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    10ee:	2a e0       	ldi	r18, 0x0A	; 10
    10f0:	b5 01       	movw	r22, r10
    10f2:	a4 01       	movw	r20, r8
    10f4:	ce 01       	movw	r24, r28
    10f6:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN5Print11printNumberEmh>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    unsigned int toPrint = (unsigned int)(remainder);
    n += print(toPrint);
    10fa:	e8 0e       	add	r14, r24
    10fc:	f9 1e       	adc	r15, r25
    remainder -= toPrint; 
    10fe:	c5 01       	movw	r24, r10
    1100:	b4 01       	movw	r22, r8
    1102:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__floatunsisf>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	c3 01       	movw	r24, r6
    110c:	b2 01       	movw	r22, r4
    110e:	0e 94 57 02 	call	0x4ae	; 0x4ae <__subsf3>
    1112:	2b 01       	movw	r4, r22
    1114:	3c 01       	movw	r6, r24
    1116:	da 94       	dec	r13
    1118:	d9 cf       	rjmp	.-78     	; 0x10cc <_ZN5Print10printFloatEdh+0x158>
  } 
  
  return n;
}
    111a:	c7 01       	movw	r24, r14
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	bf 90       	pop	r11
    112a:	af 90       	pop	r10
    112c:	9f 90       	pop	r9
    112e:	8f 90       	pop	r8
    1130:	7f 90       	pop	r7
    1132:	6f 90       	pop	r6
    1134:	5f 90       	pop	r5
    1136:	4f 90       	pop	r4
    1138:	08 95       	ret

0000113a <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    113a:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <_ZN5Print10printFloatEdh>

0000113e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    113e:	1f 92       	push	r1
    1140:	0f 92       	push	r0
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	0f 92       	push	r0
    1146:	11 24       	eor	r1, r1
    1148:	2f 93       	push	r18
    114a:	3f 93       	push	r19
    114c:	8f 93       	push	r24
    114e:	9f 93       	push	r25
    1150:	af 93       	push	r26
    1152:	bf 93       	push	r27
    1154:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <timer0_millis>
    1158:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <timer0_millis+0x1>
    115c:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <timer0_millis+0x2>
    1160:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <timer0_millis+0x3>
    1164:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <timer0_fract>
    1168:	23 e0       	ldi	r18, 0x03	; 3
    116a:	23 0f       	add	r18, r19
    116c:	2d 37       	cpi	r18, 0x7D	; 125
    116e:	20 f4       	brcc	.+8      	; 0x1178 <__vector_16+0x3a>
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	a1 1d       	adc	r26, r1
    1174:	b1 1d       	adc	r27, r1
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <__vector_16+0x44>
    1178:	26 e8       	ldi	r18, 0x86	; 134
    117a:	23 0f       	add	r18, r19
    117c:	02 96       	adiw	r24, 0x02	; 2
    117e:	a1 1d       	adc	r26, r1
    1180:	b1 1d       	adc	r27, r1
    1182:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <timer0_fract>
    1186:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <timer0_millis>
    118a:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <timer0_millis+0x1>
    118e:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <timer0_millis+0x2>
    1192:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <timer0_millis+0x3>
    1196:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer0_overflow_count>
    119a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <timer0_overflow_count+0x1>
    119e:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <timer0_overflow_count+0x2>
    11a2:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <timer0_overflow_count+0x3>
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	a1 1d       	adc	r26, r1
    11aa:	b1 1d       	adc	r27, r1
    11ac:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <timer0_overflow_count>
    11b0:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <timer0_overflow_count+0x1>
    11b4:	a0 93 38 02 	sts	0x0238, r26	; 0x800238 <timer0_overflow_count+0x2>
    11b8:	b0 93 39 02 	sts	0x0239, r27	; 0x800239 <timer0_overflow_count+0x3>
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	3f 91       	pop	r19
    11c6:	2f 91       	pop	r18
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <micros>:
    11d2:	3f b7       	in	r19, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer0_overflow_count>
    11da:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <timer0_overflow_count+0x1>
    11de:	a0 91 38 02 	lds	r26, 0x0238	; 0x800238 <timer0_overflow_count+0x2>
    11e2:	b0 91 39 02 	lds	r27, 0x0239	; 0x800239 <timer0_overflow_count+0x3>
    11e6:	26 b5       	in	r18, 0x26	; 38
    11e8:	a8 9b       	sbis	0x15, 0	; 21
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <micros+0x24>
    11ec:	2f 3f       	cpi	r18, 0xFF	; 255
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <micros+0x24>
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	a1 1d       	adc	r26, r1
    11f4:	b1 1d       	adc	r27, r1
    11f6:	3f bf       	out	0x3f, r19	; 63
    11f8:	ba 2f       	mov	r27, r26
    11fa:	a9 2f       	mov	r26, r25
    11fc:	98 2f       	mov	r25, r24
    11fe:	88 27       	eor	r24, r24
    1200:	82 0f       	add	r24, r18
    1202:	91 1d       	adc	r25, r1
    1204:	a1 1d       	adc	r26, r1
    1206:	b1 1d       	adc	r27, r1
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	42 e0       	ldi	r20, 0x02	; 2
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	88 1f       	adc	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	4a 95       	dec	r20
    1218:	d1 f7       	brne	.-12     	; 0x120e <micros+0x3c>
    121a:	08 95       	ret

0000121c <delay>:
    121c:	8f 92       	push	r8
    121e:	9f 92       	push	r9
    1220:	af 92       	push	r10
    1222:	bf 92       	push	r11
    1224:	cf 92       	push	r12
    1226:	df 92       	push	r13
    1228:	ef 92       	push	r14
    122a:	ff 92       	push	r15
    122c:	6b 01       	movw	r12, r22
    122e:	7c 01       	movw	r14, r24
    1230:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <micros>
    1234:	4b 01       	movw	r8, r22
    1236:	5c 01       	movw	r10, r24
    1238:	c1 14       	cp	r12, r1
    123a:	d1 04       	cpc	r13, r1
    123c:	e1 04       	cpc	r14, r1
    123e:	f1 04       	cpc	r15, r1
    1240:	01 f1       	breq	.+64     	; 0x1282 <delay+0x66>
    1242:	0e 94 37 0a 	call	0x146e	; 0x146e <yield>
    1246:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <micros>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	88 19       	sub	r24, r8
    1250:	99 09       	sbc	r25, r9
    1252:	aa 09       	sbc	r26, r10
    1254:	bb 09       	sbc	r27, r11
    1256:	88 3e       	cpi	r24, 0xE8	; 232
    1258:	93 40       	sbci	r25, 0x03	; 3
    125a:	a1 05       	cpc	r26, r1
    125c:	b1 05       	cpc	r27, r1
    125e:	60 f3       	brcs	.-40     	; 0x1238 <delay+0x1c>
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	c2 1a       	sub	r12, r18
    1264:	d1 08       	sbc	r13, r1
    1266:	e1 08       	sbc	r14, r1
    1268:	f1 08       	sbc	r15, r1
    126a:	88 ee       	ldi	r24, 0xE8	; 232
    126c:	88 0e       	add	r8, r24
    126e:	83 e0       	ldi	r24, 0x03	; 3
    1270:	98 1e       	adc	r9, r24
    1272:	a1 1c       	adc	r10, r1
    1274:	b1 1c       	adc	r11, r1
    1276:	c1 14       	cp	r12, r1
    1278:	d1 04       	cpc	r13, r1
    127a:	e1 04       	cpc	r14, r1
    127c:	f1 04       	cpc	r15, r1
    127e:	19 f7       	brne	.-58     	; 0x1246 <delay+0x2a>
    1280:	db cf       	rjmp	.-74     	; 0x1238 <delay+0x1c>
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	bf 90       	pop	r11
    128c:	af 90       	pop	r10
    128e:	9f 90       	pop	r9
    1290:	8f 90       	pop	r8
    1292:	08 95       	ret

00001294 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1294:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1296:	84 b5       	in	r24, 0x24	; 36
    1298:	82 60       	ori	r24, 0x02	; 2
    129a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    129c:	84 b5       	in	r24, 0x24	; 36
    129e:	81 60       	ori	r24, 0x01	; 1
    12a0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    12a2:	85 b5       	in	r24, 0x25	; 37
    12a4:	82 60       	ori	r24, 0x02	; 2
    12a6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    12a8:	85 b5       	in	r24, 0x25	; 37
    12aa:	81 60       	ori	r24, 0x01	; 1
    12ac:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    12ae:	ee e6       	ldi	r30, 0x6E	; 110
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	81 60       	ori	r24, 0x01	; 1
    12b6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    12b8:	e1 e8       	ldi	r30, 0x81	; 129
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    12be:	80 81       	ld	r24, Z
    12c0:	82 60       	ori	r24, 0x02	; 2
    12c2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    12c4:	80 81       	ld	r24, Z
    12c6:	81 60       	ori	r24, 0x01	; 1
    12c8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    12ca:	e0 e8       	ldi	r30, 0x80	; 128
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	81 60       	ori	r24, 0x01	; 1
    12d2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    12d4:	e1 eb       	ldi	r30, 0xB1	; 177
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	84 60       	ori	r24, 0x04	; 4
    12dc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    12de:	e0 eb       	ldi	r30, 0xB0	; 176
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    12e8:	ea e7       	ldi	r30, 0x7A	; 122
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	84 60       	ori	r24, 0x04	; 4
    12f0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    12f2:	80 81       	ld	r24, Z
    12f4:	82 60       	ori	r24, 0x02	; 2
    12f6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    12f8:	80 81       	ld	r24, Z
    12fa:	81 60       	ori	r24, 0x01	; 1
    12fc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    12fe:	80 81       	ld	r24, Z
    1300:	80 68       	ori	r24, 0x80	; 128
    1302:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1304:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1308:	08 95       	ret

0000130a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    130a:	8e 30       	cpi	r24, 0x0E	; 14
    130c:	08 f0       	brcs	.+2      	; 0x1310 <analogRead+0x6>
    130e:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1316:	90 e4       	ldi	r25, 0x40	; 64
    1318:	29 9f       	mul	r18, r25
    131a:	90 01       	movw	r18, r0
    131c:	11 24       	eor	r1, r1
    131e:	82 2b       	or	r24, r18
    1320:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1324:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1328:	80 64       	ori	r24, 0x40	; 64
    132a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    132e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1332:	86 fd       	sbrc	r24, 6
    1334:	fc cf       	rjmp	.-8      	; 0x132e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1336:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    133a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    133e:	90 e0       	ldi	r25, 0x00	; 0
}
    1340:	92 2b       	or	r25, r18
    1342:	08 95       	ret

00001344 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	81 f0       	breq	.+32     	; 0x1368 <turnOffPWM+0x24>
    1348:	28 f4       	brcc	.+10     	; 0x1354 <turnOffPWM+0x10>
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	99 f0       	breq	.+38     	; 0x1374 <turnOffPWM+0x30>
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	a1 f0       	breq	.+40     	; 0x137a <turnOffPWM+0x36>
    1352:	08 95       	ret
    1354:	87 30       	cpi	r24, 0x07	; 7
    1356:	a9 f0       	breq	.+42     	; 0x1382 <turnOffPWM+0x3e>
    1358:	88 30       	cpi	r24, 0x08	; 8
    135a:	b9 f0       	breq	.+46     	; 0x138a <turnOffPWM+0x46>
    135c:	84 30       	cpi	r24, 0x04	; 4
    135e:	d1 f4       	brne	.+52     	; 0x1394 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1360:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1364:	8f 7d       	andi	r24, 0xDF	; 223
    1366:	03 c0       	rjmp	.+6      	; 0x136e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1368:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    136c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    136e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1372:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1374:	84 b5       	in	r24, 0x24	; 36
    1376:	8f 77       	andi	r24, 0x7F	; 127
    1378:	02 c0       	rjmp	.+4      	; 0x137e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    137a:	84 b5       	in	r24, 0x24	; 36
    137c:	8f 7d       	andi	r24, 0xDF	; 223
    137e:	84 bd       	out	0x24, r24	; 36
    1380:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1382:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1386:	8f 77       	andi	r24, 0x7F	; 127
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    138a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    138e:	8f 7d       	andi	r24, 0xDF	; 223
    1390:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1394:	08 95       	ret

00001396 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1396:	cf 93       	push	r28
    1398:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	fc 01       	movw	r30, r24
    139e:	ea 52       	subi	r30, 0x2A	; 42
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    13a4:	fc 01       	movw	r30, r24
    13a6:	e6 51       	subi	r30, 0x16	; 22
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    13ac:	88 23       	and	r24, r24
    13ae:	61 f1       	breq	.+88     	; 0x1408 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	fc 01       	movw	r30, r24
    13b8:	e8 5f       	subi	r30, 0xF8	; 248
    13ba:	fe 4f       	sbci	r31, 0xFE	; 254
    13bc:	c5 91       	lpm	r28, Z+
    13be:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    13c0:	fc 01       	movw	r30, r24
    13c2:	e2 50       	subi	r30, 0x02	; 2
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	a5 91       	lpm	r26, Z+
    13c8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    13ca:	61 11       	cpse	r22, r1
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    13ce:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13d0:	f8 94       	cli
		*reg &= ~bit;
    13d2:	88 81       	ld	r24, Y
    13d4:	20 95       	com	r18
    13d6:	82 23       	and	r24, r18
    13d8:	88 83       	st	Y, r24
		*out &= ~bit;
    13da:	ec 91       	ld	r30, X
    13dc:	2e 23       	and	r18, r30
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    13e0:	62 30       	cpi	r22, 0x02	; 2
    13e2:	61 f4       	brne	.+24     	; 0x13fc <pinMode+0x66>
		uint8_t oldSREG = SREG;
    13e4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    13e6:	f8 94       	cli
		*reg &= ~bit;
    13e8:	38 81       	ld	r19, Y
    13ea:	82 2f       	mov	r24, r18
    13ec:	80 95       	com	r24
    13ee:	83 23       	and	r24, r19
    13f0:	88 83       	st	Y, r24
		*out |= bit;
    13f2:	ec 91       	ld	r30, X
    13f4:	2e 2b       	or	r18, r30
    13f6:	2c 93       	st	X, r18
		SREG = oldSREG;
    13f8:	9f bf       	out	0x3f, r25	; 63
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    13fc:	8f b7       	in	r24, 0x3f	; 63
                cli();
    13fe:	f8 94       	cli
		*reg |= bit;
    1400:	e8 81       	ld	r30, Y
    1402:	2e 2b       	or	r18, r30
    1404:	28 83       	st	Y, r18
		SREG = oldSREG;
    1406:	8f bf       	out	0x3f, r24	; 63
	}
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	f9 01       	movw	r30, r18
    141a:	ee 53       	subi	r30, 0x3E	; 62
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1420:	f9 01       	movw	r30, r18
    1422:	ea 52       	subi	r30, 0x2A	; 42
    1424:	ff 4f       	sbci	r31, 0xFF	; 255
    1426:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1428:	f9 01       	movw	r30, r18
    142a:	e6 51       	subi	r30, 0x16	; 22
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1430:	cc 23       	and	r28, r28
    1432:	c9 f0       	breq	.+50     	; 0x1466 <digitalWrite+0x58>
    1434:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1436:	81 11       	cpse	r24, r1
    1438:	0e 94 a2 09 	call	0x1344	; 0x1344 <turnOffPWM>

	out = portOutputRegister(port);
    143c:	ec 2f       	mov	r30, r28
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	e2 50       	subi	r30, 0x02	; 2
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	a5 91       	lpm	r26, Z+
    144a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    144c:	8f b7       	in	r24, 0x3f	; 63
	cli();
    144e:	f8 94       	cli

	if (val == LOW) {
    1450:	11 11       	cpse	r17, r1
    1452:	05 c0       	rjmp	.+10     	; 0x145e <digitalWrite+0x50>
		*out &= ~bit;
    1454:	9c 91       	ld	r25, X
    1456:	ed 2f       	mov	r30, r29
    1458:	e0 95       	com	r30
    145a:	e9 23       	and	r30, r25
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <digitalWrite+0x54>
	} else {
		*out |= bit;
    145e:	ec 91       	ld	r30, X
    1460:	ed 2b       	or	r30, r29
    1462:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    1464:	8f bf       	out	0x3f, r24	; 63
}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	08 95       	ret

0000146e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    146e:	08 95       	ret

00001470 <__cmpsf2>:
    1470:	0e 94 3d 0a 	call	0x147a	; 0x147a <__fp_cmp>
    1474:	08 f4       	brcc	.+2      	; 0x1478 <__cmpsf2+0x8>
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	08 95       	ret

0000147a <__fp_cmp>:
    147a:	99 0f       	add	r25, r25
    147c:	00 08       	sbc	r0, r0
    147e:	55 0f       	add	r21, r21
    1480:	aa 0b       	sbc	r26, r26
    1482:	e0 e8       	ldi	r30, 0x80	; 128
    1484:	fe ef       	ldi	r31, 0xFE	; 254
    1486:	16 16       	cp	r1, r22
    1488:	17 06       	cpc	r1, r23
    148a:	e8 07       	cpc	r30, r24
    148c:	f9 07       	cpc	r31, r25
    148e:	c0 f0       	brcs	.+48     	; 0x14c0 <__fp_cmp+0x46>
    1490:	12 16       	cp	r1, r18
    1492:	13 06       	cpc	r1, r19
    1494:	e4 07       	cpc	r30, r20
    1496:	f5 07       	cpc	r31, r21
    1498:	98 f0       	brcs	.+38     	; 0x14c0 <__fp_cmp+0x46>
    149a:	62 1b       	sub	r22, r18
    149c:	73 0b       	sbc	r23, r19
    149e:	84 0b       	sbc	r24, r20
    14a0:	95 0b       	sbc	r25, r21
    14a2:	39 f4       	brne	.+14     	; 0x14b2 <__fp_cmp+0x38>
    14a4:	0a 26       	eor	r0, r26
    14a6:	61 f0       	breq	.+24     	; 0x14c0 <__fp_cmp+0x46>
    14a8:	23 2b       	or	r18, r19
    14aa:	24 2b       	or	r18, r20
    14ac:	25 2b       	or	r18, r21
    14ae:	21 f4       	brne	.+8      	; 0x14b8 <__fp_cmp+0x3e>
    14b0:	08 95       	ret
    14b2:	0a 26       	eor	r0, r26
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <__fp_cmp+0x3e>
    14b6:	a1 40       	sbci	r26, 0x01	; 1
    14b8:	a6 95       	lsr	r26
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	81 1d       	adc	r24, r1
    14be:	81 1d       	adc	r24, r1
    14c0:	08 95       	ret

000014c2 <__gesf2>:
    14c2:	0e 94 3d 0a 	call	0x147a	; 0x147a <__fp_cmp>
    14c6:	08 f4       	brcc	.+2      	; 0x14ca <__gesf2+0x8>
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
    14ca:	08 95       	ret

000014cc <__unordsf2>:
    14cc:	0e 94 3d 0a 	call	0x147a	; 0x147a <__fp_cmp>
    14d0:	88 0b       	sbc	r24, r24
    14d2:	99 0b       	sbc	r25, r25
    14d4:	08 95       	ret

000014d6 <__divmodhi4>:
    14d6:	97 fb       	bst	r25, 7
    14d8:	07 2e       	mov	r0, r23
    14da:	16 f4       	brtc	.+4      	; 0x14e0 <__divmodhi4+0xa>
    14dc:	00 94       	com	r0
    14de:	07 d0       	rcall	.+14     	; 0x14ee <__divmodhi4_neg1>
    14e0:	77 fd       	sbrc	r23, 7
    14e2:	09 d0       	rcall	.+18     	; 0x14f6 <__divmodhi4_neg2>
    14e4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__udivmodhi4>
    14e8:	07 fc       	sbrc	r0, 7
    14ea:	05 d0       	rcall	.+10     	; 0x14f6 <__divmodhi4_neg2>
    14ec:	3e f4       	brtc	.+14     	; 0x14fc <__divmodhi4_exit>

000014ee <__divmodhi4_neg1>:
    14ee:	90 95       	com	r25
    14f0:	81 95       	neg	r24
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	08 95       	ret

000014f6 <__divmodhi4_neg2>:
    14f6:	70 95       	com	r23
    14f8:	61 95       	neg	r22
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255

000014fc <__divmodhi4_exit>:
    14fc:	08 95       	ret

000014fe <__udivmodsi4>:
    14fe:	a1 e2       	ldi	r26, 0x21	; 33
    1500:	1a 2e       	mov	r1, r26
    1502:	aa 1b       	sub	r26, r26
    1504:	bb 1b       	sub	r27, r27
    1506:	fd 01       	movw	r30, r26
    1508:	0d c0       	rjmp	.+26     	; 0x1524 <__udivmodsi4_ep>

0000150a <__udivmodsi4_loop>:
    150a:	aa 1f       	adc	r26, r26
    150c:	bb 1f       	adc	r27, r27
    150e:	ee 1f       	adc	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	a2 17       	cp	r26, r18
    1514:	b3 07       	cpc	r27, r19
    1516:	e4 07       	cpc	r30, r20
    1518:	f5 07       	cpc	r31, r21
    151a:	20 f0       	brcs	.+8      	; 0x1524 <__udivmodsi4_ep>
    151c:	a2 1b       	sub	r26, r18
    151e:	b3 0b       	sbc	r27, r19
    1520:	e4 0b       	sbc	r30, r20
    1522:	f5 0b       	sbc	r31, r21

00001524 <__udivmodsi4_ep>:
    1524:	66 1f       	adc	r22, r22
    1526:	77 1f       	adc	r23, r23
    1528:	88 1f       	adc	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	1a 94       	dec	r1
    152e:	69 f7       	brne	.-38     	; 0x150a <__udivmodsi4_loop>
    1530:	60 95       	com	r22
    1532:	70 95       	com	r23
    1534:	80 95       	com	r24
    1536:	90 95       	com	r25
    1538:	9b 01       	movw	r18, r22
    153a:	ac 01       	movw	r20, r24
    153c:	bd 01       	movw	r22, r26
    153e:	cf 01       	movw	r24, r30
    1540:	08 95       	ret

00001542 <__udivmodhi4>:
    1542:	aa 1b       	sub	r26, r26
    1544:	bb 1b       	sub	r27, r27
    1546:	51 e1       	ldi	r21, 0x11	; 17
    1548:	07 c0       	rjmp	.+14     	; 0x1558 <__udivmodhi4_ep>

0000154a <__udivmodhi4_loop>:
    154a:	aa 1f       	adc	r26, r26
    154c:	bb 1f       	adc	r27, r27
    154e:	a6 17       	cp	r26, r22
    1550:	b7 07       	cpc	r27, r23
    1552:	10 f0       	brcs	.+4      	; 0x1558 <__udivmodhi4_ep>
    1554:	a6 1b       	sub	r26, r22
    1556:	b7 0b       	sbc	r27, r23

00001558 <__udivmodhi4_ep>:
    1558:	88 1f       	adc	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	5a 95       	dec	r21
    155e:	a9 f7       	brne	.-22     	; 0x154a <__udivmodhi4_loop>
    1560:	80 95       	com	r24
    1562:	90 95       	com	r25
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	08 95       	ret

0000156a <__tablejump2__>:
    156a:	ee 0f       	add	r30, r30
    156c:	ff 1f       	adc	r31, r31
    156e:	05 90       	lpm	r0, Z+
    1570:	f4 91       	lpm	r31, Z
    1572:	e0 2d       	mov	r30, r0
    1574:	09 94       	ijmp

00001576 <_exit>:
    1576:	f8 94       	cli

00001578 <__stop_program>:
    1578:	ff cf       	rjmp	.-2      	; 0x1578 <__stop_program>
